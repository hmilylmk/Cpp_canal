// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntryProtocol.proto

#include "EntryProtocol.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace com {
namespace alibaba {
namespace otter {
namespace canal {
namespace protocol {
template <typename>
PROTOBUF_CONSTEXPR Entry::Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.storevalue_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.entryType_present_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntryDefaultTypeInternal() {}
  union {
    Entry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntryDefaultTypeInternal _Entry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.props_)*/{}
  , /*decltype(_impl_.logfilename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.serverencode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.schemaname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tablename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gtid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.logfileoffset_)*/ ::int64_t{0}

  , /*decltype(_impl_.serverid_)*/ ::int64_t{0}

  , /*decltype(_impl_.executetime_)*/ ::int64_t{0}

  , /*decltype(_impl_.eventlength_)*/ ::int64_t{0}

  , /*decltype(_impl_.version_present_)*/{}
  , /*decltype(_impl_.sourceType_present_)*/{}
  , /*decltype(_impl_.eventType_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Column::Column(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.props_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mysqltype_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ 0

  , /*decltype(_impl_.sqltype_)*/ 0

  , /*decltype(_impl_.iskey_)*/ false

  , /*decltype(_impl_.updated_)*/ false

  , /*decltype(_impl_.length_)*/ 0

  , /*decltype(_impl_.isNull_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnDefaultTypeInternal() {}
  union {
    Column _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnDefaultTypeInternal _Column_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RowData::RowData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.beforecolumns_)*/{}
  , /*decltype(_impl_.aftercolumns_)*/{}
  , /*decltype(_impl_.props_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RowDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RowDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RowDataDefaultTypeInternal() {}
  union {
    RowData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RowDataDefaultTypeInternal _RowData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RowChange::RowChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rowdatas_)*/{}
  , /*decltype(_impl_.props_)*/{}
  , /*decltype(_impl_.sql_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ddlschemaname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tableid_)*/ ::int64_t{0}

  , /*decltype(_impl_.eventType_present_)*/{}
  , /*decltype(_impl_.isDdl_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RowChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RowChangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RowChangeDefaultTypeInternal() {}
  union {
    RowChange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RowChangeDefaultTypeInternal _RowChange_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransactionBegin::TransactionBegin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.props_)*/{}
  , /*decltype(_impl_.transactionid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.executetime_)*/ ::int64_t{0}

  , /*decltype(_impl_.threadid_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionBeginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionBeginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionBeginDefaultTypeInternal() {}
  union {
    TransactionBegin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionBeginDefaultTypeInternal _TransactionBegin_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransactionEnd::TransactionEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.props_)*/{}
  , /*decltype(_impl_.transactionid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.executetime_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionEndDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionEndDefaultTypeInternal() {}
  union {
    TransactionEnd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionEndDefaultTypeInternal _TransactionEnd_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Pair::Pair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PairDefaultTypeInternal() {}
  union {
    Pair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PairDefaultTypeInternal _Pair_default_instance_;
}  // namespace protocol
}  // namespace canal
}  // namespace otter
}  // namespace alibaba
}  // namespace com
static ::_pb::Metadata file_level_metadata_EntryProtocol_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_EntryProtocol_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_EntryProtocol_2eproto = nullptr;
const ::uint32_t TableStruct_EntryProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Entry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Entry, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Entry, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Entry, _impl_.header_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Entry, _impl_.storevalue_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Entry, _impl_.entryType_present_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.logfilename_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.logfileoffset_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.serverid_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.serverencode_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.executetime_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.schemaname_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.tablename_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.eventlength_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.props_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.gtid_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.version_present_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.sourceType_present_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_.eventType_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.sqltype_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.iskey_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.updated_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.props_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.mysqltype_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_.isNull_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowData, _impl_.beforecolumns_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowData, _impl_.aftercolumns_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowData, _impl_.props_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_.tableid_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_.sql_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_.rowdatas_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_.props_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_.ddlschemaname_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_.eventType_present_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_.isDdl_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionBegin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionBegin, _impl_.executetime_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionBegin, _impl_.transactionid_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionBegin, _impl_.props_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionBegin, _impl_.threadid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionEnd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionEnd, _impl_.executetime_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionEnd, _impl_.transactionid_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::TransactionEnd, _impl_.props_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Pair, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Pair, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Pair, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::com::alibaba::otter::canal::protocol::Entry)},
        { 15, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Header)},
        { 39, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Column)},
        { 58, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::RowData)},
        { 69, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::RowChange)},
        { 86, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::TransactionBegin)},
        { 98, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::TransactionEnd)},
        { 109, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Pair)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::com::alibaba::otter::canal::protocol::_Entry_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Header_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Column_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_RowData_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_RowChange_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_TransactionBegin_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_TransactionEnd_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Pair_default_instance_._instance,
};
const char descriptor_table_protodef_EntryProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023EntryProtocol.proto\022 com.alibaba.otter"
    ".canal.protocol\"\254\001\n\005Entry\0228\n\006header\030\001 \001("
    "\0132(.com.alibaba.otter.canal.protocol.Hea"
    "der\022@\n\tentryType\030\002 \001(\0162+.com.alibaba.ott"
    "er.canal.protocol.EntryTypeH\000\022\022\n\nstoreVa"
    "lue\030\003 \001(\014B\023\n\021entryType_present\"\303\003\n\006Heade"
    "r\022\021\n\007version\030\001 \001(\005H\000\022\023\n\013logfileName\030\002 \001("
    "\t\022\025\n\rlogfileOffset\030\003 \001(\003\022\020\n\010serverId\030\004 \001"
    "(\003\022\024\n\014serverenCode\030\005 \001(\t\022\023\n\013executeTime\030"
    "\006 \001(\003\022<\n\nsourceType\030\007 \001(\0162&.com.alibaba."
    "otter.canal.protocol.TypeH\001\022\022\n\nschemaNam"
    "e\030\010 \001(\t\022\021\n\ttableName\030\t \001(\t\022\023\n\013eventLengt"
    "h\030\n \001(\003\022@\n\teventType\030\013 \001(\0162+.com.alibaba"
    ".otter.canal.protocol.EventTypeH\002\0225\n\005pro"
    "ps\030\014 \003(\0132&.com.alibaba.otter.canal.proto"
    "col.Pair\022\014\n\004gtid\030\r \001(\tB\021\n\017version_presen"
    "tB\024\n\022sourceType_presentB\023\n\021eventType_pre"
    "sent\"\343\001\n\006Column\022\r\n\005index\030\001 \001(\005\022\017\n\007sqlTyp"
    "e\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\r\n\005isKey\030\004 \001(\010\022\017\n\007"
    "updated\030\005 \001(\010\022\020\n\006isNull\030\006 \001(\010H\000\0225\n\005props"
    "\030\007 \003(\0132&.com.alibaba.otter.canal.protoco"
    "l.Pair\022\r\n\005value\030\010 \001(\t\022\016\n\006length\030\t \001(\005\022\021\n"
    "\tmysqlType\030\n \001(\tB\020\n\016isNull_present\"\301\001\n\007R"
    "owData\022\?\n\rbeforeColumns\030\001 \003(\0132(.com.alib"
    "aba.otter.canal.protocol.Column\022>\n\014after"
    "Columns\030\002 \003(\0132(.com.alibaba.otter.canal."
    "protocol.Column\0225\n\005props\030\003 \003(\0132&.com.ali"
    "baba.otter.canal.protocol.Pair\"\255\002\n\tRowCh"
    "ange\022\017\n\007tableId\030\001 \001(\003\022@\n\teventType\030\002 \001(\016"
    "2+.com.alibaba.otter.canal.protocol.Even"
    "tTypeH\000\022\017\n\005isDdl\030\n \001(\010H\001\022\013\n\003sql\030\013 \001(\t\022;\n"
    "\010rowDatas\030\014 \003(\0132).com.alibaba.otter.cana"
    "l.protocol.RowData\0225\n\005props\030\r \003(\0132&.com."
    "alibaba.otter.canal.protocol.Pair\022\025\n\rddl"
    "SchemaName\030\016 \001(\tB\023\n\021eventType_presentB\017\n"
    "\risDdl_present\"\207\001\n\020TransactionBegin\022\023\n\013e"
    "xecuteTime\030\001 \001(\003\022\025\n\rtransactionId\030\002 \001(\t\022"
    "5\n\005props\030\003 \003(\0132&.com.alibaba.otter.canal"
    ".protocol.Pair\022\020\n\010threadId\030\004 \001(\003\"s\n\016Tran"
    "sactionEnd\022\023\n\013executeTime\030\001 \001(\003\022\025\n\rtrans"
    "actionId\030\002 \001(\t\0225\n\005props\030\003 \003(\0132&.com.alib"
    "aba.otter.canal.protocol.Pair\"\"\n\004Pair\022\013\n"
    "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t*}\n\tEntryType\022\035"
    "\n\031ENTRYTYPECOMPATIBLEPROTO2\020\000\022\024\n\020TRANSAC"
    "TIONBEGIN\020\001\022\013\n\007ROWDATA\020\002\022\022\n\016TRANSACTIONE"
    "ND\020\003\022\r\n\tHEARTBEAT\020\004\022\013\n\007GTIDLOG\020\005*\345\001\n\tEve"
    "ntType\022\035\n\031EVENTTYPECOMPATIBLEPROTO2\020\000\022\n\n"
    "\006INSERT\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DELETE\020\003\022\n\n\006CRE"
    "ATE\020\004\022\t\n\005ALTER\020\005\022\t\n\005ERASE\020\006\022\t\n\005QUERY\020\007\022\014"
    "\n\010TRUNCATE\020\010\022\n\n\006RENAME\020\t\022\n\n\006CINDEX\020\n\022\n\n\006"
    "DINDEX\020\013\022\010\n\004GTID\020\014\022\014\n\010XACOMMIT\020\r\022\016\n\nXARO"
    "LLBACK\020\016\022\016\n\nMHEARTBEAT\020\017*B\n\004Type\022\030\n\024TYPE"
    "COMPATIBLEPROTO2\020\000\022\n\n\006ORACLE\020\001\022\t\n\005MYSQL\020"
    "\002\022\t\n\005PGSQL\020\003B0\n com.alibaba.otter.canal."
    "protocolB\nCanalEntryH\001b\006proto3"
};
static ::absl::once_flag descriptor_table_EntryProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_EntryProtocol_2eproto = {
    false,
    false,
    2190,
    descriptor_table_protodef_EntryProtocol_2eproto,
    "EntryProtocol.proto",
    &descriptor_table_EntryProtocol_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_EntryProtocol_2eproto::offsets,
    file_level_metadata_EntryProtocol_2eproto,
    file_level_enum_descriptors_EntryProtocol_2eproto,
    file_level_service_descriptors_EntryProtocol_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_EntryProtocol_2eproto_getter() {
  return &descriptor_table_EntryProtocol_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_EntryProtocol_2eproto(&descriptor_table_EntryProtocol_2eproto);
namespace com {
namespace alibaba {
namespace otter {
namespace canal {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_EntryProtocol_2eproto);
  return file_level_enum_descriptors_EntryProtocol_2eproto[0];
}
bool EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_EntryProtocol_2eproto);
  return file_level_enum_descriptors_EntryProtocol_2eproto[1];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_EntryProtocol_2eproto);
  return file_level_enum_descriptors_EntryProtocol_2eproto[2];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<Entry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Entry, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Entry, _impl_._oneof_case_);
  static const ::com::alibaba::otter::canal::protocol::Header& header(const Entry* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::alibaba::otter::canal::protocol::Header&
Entry::_Internal::header(const Entry* msg) {
  return *msg->_impl_.header_;
}
Entry::Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.storevalue_) {}

    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.entryType_present_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.storevalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.storevalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_storevalue().empty()) {
    _this->_impl_.storevalue_.Set(from._internal_storevalue(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::com::alibaba::otter::canal::protocol::Header(*from._impl_.header_);
  }
  clear_has_entryType_present();
  switch (from.entryType_present_case()) {
    case kEntryType: {
      _this->_internal_set_entrytype(from._internal_entrytype());
      break;
    }
    case ENTRYTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Entry)
}

inline void Entry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.storevalue_) {}

    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.entryType_present_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.storevalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.storevalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_entryType_present();
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.storevalue_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_entryType_present()) {
    clear_entryType_present();
  }
}

void Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entry::clear_entryType_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Entry)
  switch (entryType_present_case()) {
    case kEntryType: {
      // No need to clear
      break;
    }
    case ENTRYTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ENTRYTYPE_PRESENT_NOT_SET;
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Entry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.storevalue_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  clear_entryType_present();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.alibaba.otter.canal.protocol.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .com.alibaba.otter.canal.protocol.EntryType entryType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_entrytype(static_cast<::com::alibaba::otter::canal::protocol::EntryType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes storeValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_storevalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Entry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Entry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .com.alibaba.otter.canal.protocol.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .com.alibaba.otter.canal.protocol.EntryType entryType = 2;
  if (entryType_present_case() == kEntryType) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_entrytype(), target);
  }

  // bytes storeValue = 3;
  if (!this->_internal_storevalue().empty()) {
    const std::string& _s = this->_internal_storevalue();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Entry)
  return target;
}

::size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Entry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes storeValue = 3;
  if (!this->_internal_storevalue().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_storevalue());
  }

  // .com.alibaba.otter.canal.protocol.Header header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  switch (entryType_present_case()) {
    // .com.alibaba.otter.canal.protocol.EntryType entryType = 2;
    case kEntryType: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_entrytype());
      break;
    }
    case ENTRYTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entry::GetClassData() const { return &_class_data_; }


void Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entry*>(&to_msg);
  auto& from = static_cast<const Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Entry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_storevalue().empty()) {
    _this->_internal_set_storevalue(from._internal_storevalue());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::com::alibaba::otter::canal::protocol::Header::MergeFrom(
        from._internal_header());
  }
  switch (from.entryType_present_case()) {
    case kEntryType: {
      _this->_internal_set_entrytype(from._internal_entrytype());
      break;
    }
    case ENTRYTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.storevalue_, lhs_arena,
                                       &other->_impl_.storevalue_, rhs_arena);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.entryType_present_, other->_impl_.entryType_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EntryProtocol_2eproto_getter, &descriptor_table_EntryProtocol_2eproto_once,
      file_level_metadata_EntryProtocol_2eproto[0]);
}
// ===================================================================

class Header::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Header, _impl_._oneof_case_);
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){from._impl_.props_}
    , decltype(_impl_.logfilename_) {}

    , decltype(_impl_.serverencode_) {}

    , decltype(_impl_.schemaname_) {}

    , decltype(_impl_.tablename_) {}

    , decltype(_impl_.gtid_) {}

    , decltype(_impl_.logfileoffset_) {}

    , decltype(_impl_.serverid_) {}

    , decltype(_impl_.executetime_) {}

    , decltype(_impl_.eventlength_) {}

    , decltype(_impl_.version_present_){}
    , decltype(_impl_.sourceType_present_){}
    , decltype(_impl_.eventType_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.logfilename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logfilename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logfilename().empty()) {
    _this->_impl_.logfilename_.Set(from._internal_logfilename(), _this->GetArenaForAllocation());
  }
  _impl_.serverencode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.serverencode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverencode().empty()) {
    _this->_impl_.serverencode_.Set(from._internal_serverencode(), _this->GetArenaForAllocation());
  }
  _impl_.schemaname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schemaname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schemaname().empty()) {
    _this->_impl_.schemaname_.Set(from._internal_schemaname(), _this->GetArenaForAllocation());
  }
  _impl_.tablename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tablename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tablename().empty()) {
    _this->_impl_.tablename_.Set(from._internal_tablename(), _this->GetArenaForAllocation());
  }
  _impl_.gtid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gtid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gtid().empty()) {
    _this->_impl_.gtid_.Set(from._internal_gtid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.logfileoffset_, &from._impl_.logfileoffset_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.eventlength_) -
    reinterpret_cast<char*>(&_impl_.logfileoffset_)) + sizeof(_impl_.eventlength_));
  clear_has_version_present();
  switch (from.version_present_case()) {
    case kVersion: {
      _this->_internal_set_version(from._internal_version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_sourceType_present();
  switch (from.sourceType_present_case()) {
    case kSourceType: {
      _this->_internal_set_sourcetype(from._internal_sourcetype());
      break;
    }
    case SOURCETYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_eventType_present();
  switch (from.eventType_present_case()) {
    case kEventType: {
      _this->_internal_set_eventtype(from._internal_eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Header)
}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){arena}
    , decltype(_impl_.logfilename_) {}

    , decltype(_impl_.serverencode_) {}

    , decltype(_impl_.schemaname_) {}

    , decltype(_impl_.tablename_) {}

    , decltype(_impl_.gtid_) {}

    , decltype(_impl_.logfileoffset_) { ::int64_t{0} }

    , decltype(_impl_.serverid_) { ::int64_t{0} }

    , decltype(_impl_.executetime_) { ::int64_t{0} }

    , decltype(_impl_.eventlength_) { ::int64_t{0} }

    , decltype(_impl_.version_present_){}
    , decltype(_impl_.sourceType_present_){}
    , decltype(_impl_.eventType_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.logfilename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logfilename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverencode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.serverencode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.schemaname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.schemaname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tablename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tablename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gtid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gtid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_version_present();
  clear_has_sourceType_present();
  clear_has_eventType_present();
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_props()->~RepeatedPtrField();
  _impl_.logfilename_.Destroy();
  _impl_.serverencode_.Destroy();
  _impl_.schemaname_.Destroy();
  _impl_.tablename_.Destroy();
  _impl_.gtid_.Destroy();
  if (has_version_present()) {
    clear_version_present();
  }
  if (has_sourceType_present()) {
    clear_sourceType_present();
  }
  if (has_eventType_present()) {
    clear_eventType_present();
  }
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::clear_version_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Header)
  switch (version_present_case()) {
    case kVersion: {
      // No need to clear
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VERSION_PRESENT_NOT_SET;
}

void Header::clear_sourceType_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Header)
  switch (sourceType_present_case()) {
    case kSourceType: {
      // No need to clear
      break;
    }
    case SOURCETYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = SOURCETYPE_PRESENT_NOT_SET;
}

void Header::clear_eventType_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Header)
  switch (eventType_present_case()) {
    case kEventType: {
      // No need to clear
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = EVENTTYPE_PRESENT_NOT_SET;
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_props()->Clear();
  _impl_.logfilename_.ClearToEmpty();
  _impl_.serverencode_.ClearToEmpty();
  _impl_.schemaname_.ClearToEmpty();
  _impl_.tablename_.ClearToEmpty();
  _impl_.gtid_.ClearToEmpty();
  ::memset(&_impl_.logfileoffset_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.eventlength_) -
      reinterpret_cast<char*>(&_impl_.logfileoffset_)) + sizeof(_impl_.eventlength_));
  clear_version_present();
  clear_sourceType_present();
  clear_eventType_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string logfileName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_logfilename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Header.logfileName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 logfileOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.logfileoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 serverId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string serverenCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_serverencode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Header.serverenCode"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 executeTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.executetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .com.alibaba.otter.canal.protocol.Type sourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_sourcetype(static_cast<::com::alibaba::otter::canal::protocol::Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string schemaName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_schemaname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Header.schemaName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tableName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_tablename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Header.tableName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 eventLength = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.eventlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .com.alibaba.otter.canal.protocol.EventType eventType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::com::alibaba::otter::canal::protocol::EventType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string gtid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_gtid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Header.gtid"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Header)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (version_present_case() == kVersion) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_version(), target);
  }

  // string logfileName = 2;
  if (!this->_internal_logfilename().empty()) {
    const std::string& _s = this->_internal_logfilename();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Header.logfileName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 logfileOffset = 3;
  if (this->_internal_logfileoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_logfileoffset(), target);
  }

  // int64 serverId = 4;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_serverid(), target);
  }

  // string serverenCode = 5;
  if (!this->_internal_serverencode().empty()) {
    const std::string& _s = this->_internal_serverencode();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Header.serverenCode");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int64 executeTime = 6;
  if (this->_internal_executetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_executetime(), target);
  }

  // .com.alibaba.otter.canal.protocol.Type sourceType = 7;
  if (sourceType_present_case() == kSourceType) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_sourcetype(), target);
  }

  // string schemaName = 8;
  if (!this->_internal_schemaname().empty()) {
    const std::string& _s = this->_internal_schemaname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Header.schemaName");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string tableName = 9;
  if (!this->_internal_tablename().empty()) {
    const std::string& _s = this->_internal_tablename();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Header.tableName");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // int64 eventLength = 10;
  if (this->_internal_eventlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        10, this->_internal_eventlength(), target);
  }

  // .com.alibaba.otter.canal.protocol.EventType eventType = 11;
  if (eventType_present_case() == kEventType) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_eventtype(), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string gtid = 13;
  if (!this->_internal_gtid().empty()) {
    const std::string& _s = this->_internal_gtid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Header.gtid");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->_internal_props()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string logfileName = 2;
  if (!this->_internal_logfilename().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_logfilename());
  }

  // string serverenCode = 5;
  if (!this->_internal_serverencode().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_serverencode());
  }

  // string schemaName = 8;
  if (!this->_internal_schemaname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_schemaname());
  }

  // string tableName = 9;
  if (!this->_internal_tablename().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tablename());
  }

  // string gtid = 13;
  if (!this->_internal_gtid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_gtid());
  }

  // int64 logfileOffset = 3;
  if (this->_internal_logfileoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_logfileoffset());
  }

  // int64 serverId = 4;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_serverid());
  }

  // int64 executeTime = 6;
  if (this->_internal_executetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_executetime());
  }

  // int64 eventLength = 10;
  if (this->_internal_eventlength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_eventlength());
  }

  switch (version_present_case()) {
    // int32 version = 1;
    case kVersion: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (sourceType_present_case()) {
    // .com.alibaba.otter.canal.protocol.Type sourceType = 7;
    case kSourceType: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_sourcetype());
      break;
    }
    case SOURCETYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (eventType_present_case()) {
    // .com.alibaba.otter.canal.protocol.EventType eventType = 11;
    case kEventType: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_props()->MergeFrom(from._internal_props());
  if (!from._internal_logfilename().empty()) {
    _this->_internal_set_logfilename(from._internal_logfilename());
  }
  if (!from._internal_serverencode().empty()) {
    _this->_internal_set_serverencode(from._internal_serverencode());
  }
  if (!from._internal_schemaname().empty()) {
    _this->_internal_set_schemaname(from._internal_schemaname());
  }
  if (!from._internal_tablename().empty()) {
    _this->_internal_set_tablename(from._internal_tablename());
  }
  if (!from._internal_gtid().empty()) {
    _this->_internal_set_gtid(from._internal_gtid());
  }
  if (from._internal_logfileoffset() != 0) {
    _this->_internal_set_logfileoffset(from._internal_logfileoffset());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_executetime() != 0) {
    _this->_internal_set_executetime(from._internal_executetime());
  }
  if (from._internal_eventlength() != 0) {
    _this->_internal_set_eventlength(from._internal_eventlength());
  }
  switch (from.version_present_case()) {
    case kVersion: {
      _this->_internal_set_version(from._internal_version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.sourceType_present_case()) {
    case kSourceType: {
      _this->_internal_set_sourcetype(from._internal_sourcetype());
      break;
    }
    case SOURCETYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.eventType_present_case()) {
    case kEventType: {
      _this->_internal_set_eventtype(from._internal_eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_props()->InternalSwap(other->_internal_mutable_props());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.logfilename_, lhs_arena,
                                       &other->_impl_.logfilename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.serverencode_, lhs_arena,
                                       &other->_impl_.serverencode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schemaname_, lhs_arena,
                                       &other->_impl_.schemaname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tablename_, lhs_arena,
                                       &other->_impl_.tablename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gtid_, lhs_arena,
                                       &other->_impl_.gtid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.eventlength_)
      + sizeof(Header::_impl_.eventlength_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.logfileoffset_)>(
          reinterpret_cast<char*>(&_impl_.logfileoffset_),
          reinterpret_cast<char*>(&other->_impl_.logfileoffset_));
  swap(_impl_.version_present_, other->_impl_.version_present_);
  swap(_impl_.sourceType_present_, other->_impl_.sourceType_present_);
  swap(_impl_.eventType_present_, other->_impl_.eventType_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EntryProtocol_2eproto_getter, &descriptor_table_EntryProtocol_2eproto_once,
      file_level_metadata_EntryProtocol_2eproto[1]);
}
// ===================================================================

class Column::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Column, _impl_._oneof_case_);
};

Column::Column(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Column)
}
Column::Column(const Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Column* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){from._impl_.props_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.mysqltype_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.sqltype_) {}

    , decltype(_impl_.iskey_) {}

    , decltype(_impl_.updated_) {}

    , decltype(_impl_.length_) {}

    , decltype(_impl_.isNull_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  _impl_.mysqltype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mysqltype_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mysqltype().empty()) {
    _this->_impl_.mysqltype_.Set(from._internal_mysqltype(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.length_));
  clear_has_isNull_present();
  switch (from.isNull_present_case()) {
    case kIsNull: {
      _this->_internal_set_isnull(from._internal_isnull());
      break;
    }
    case ISNULL_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Column)
}

inline void Column::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.mysqltype_) {}

    , decltype(_impl_.index_) { 0 }

    , decltype(_impl_.sqltype_) { 0 }

    , decltype(_impl_.iskey_) { false }

    , decltype(_impl_.updated_) { false }

    , decltype(_impl_.length_) { 0 }

    , decltype(_impl_.isNull_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mysqltype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mysqltype_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_isNull_present();
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Column)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Column::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_props()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
  _impl_.mysqltype_.Destroy();
  if (has_isNull_present()) {
    clear_isNull_present();
  }
}

void Column::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Column::clear_isNull_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Column)
  switch (isNull_present_case()) {
    case kIsNull: {
      // No need to clear
      break;
    }
    case ISNULL_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ISNULL_PRESENT_NOT_SET;
}


void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Column)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_props()->Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.mysqltype_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.length_));
  clear_isNull_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Column::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 sqlType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.sqltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Column.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.iskey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool updated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isNull = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _internal_set_isnull(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Column.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string mysqlType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_mysqltype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Column.mysqlType"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Column::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Column)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_index(), target);
  }

  // int32 sqlType = 2;
  if (this->_internal_sqltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_sqltype(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Column.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool isKey = 4;
  if (this->_internal_iskey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_iskey(), target);
  }

  // bool updated = 5;
  if (this->_internal_updated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_updated(), target);
  }

  // bool isNull = 6;
  if (isNull_present_case() == kIsNull) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_isnull(), target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string value = 8;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Column.value");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // int32 length = 9;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_length(), target);
  }

  // string mysqlType = 10;
  if (!this->_internal_mysqltype().empty()) {
    const std::string& _s = this->_internal_mysqltype();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Column.mysqlType");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Column)
  return target;
}

::size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Column)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->_internal_props()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string value = 8;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  // string mysqlType = 10;
  if (!this->_internal_mysqltype().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mysqltype());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  // int32 sqlType = 2;
  if (this->_internal_sqltype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sqltype());
  }

  // bool isKey = 4;
  if (this->_internal_iskey() != 0) {
    total_size += 2;
  }

  // bool updated = 5;
  if (this->_internal_updated() != 0) {
    total_size += 2;
  }

  // int32 length = 9;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_length());
  }

  switch (isNull_present_case()) {
    // bool isNull = 6;
    case kIsNull: {
      total_size += 2;
      break;
    }
    case ISNULL_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Column::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Column::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Column::GetClassData() const { return &_class_data_; }


void Column::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Column*>(&to_msg);
  auto& from = static_cast<const Column&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Column)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_props()->MergeFrom(from._internal_props());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_mysqltype().empty()) {
    _this->_internal_set_mysqltype(from._internal_mysqltype());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_sqltype() != 0) {
    _this->_internal_set_sqltype(from._internal_sqltype());
  }
  if (from._internal_iskey() != 0) {
    _this->_internal_set_iskey(from._internal_iskey());
  }
  if (from._internal_updated() != 0) {
    _this->_internal_set_updated(from._internal_updated());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  switch (from.isNull_present_case()) {
    case kIsNull: {
      _this->_internal_set_isnull(from._internal_isnull());
      break;
    }
    case ISNULL_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  return true;
}

void Column::InternalSwap(Column* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_props()->InternalSwap(other->_internal_mutable_props());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mysqltype_, lhs_arena,
                                       &other->_impl_.mysqltype_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Column, _impl_.length_)
      + sizeof(Column::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(Column, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
  swap(_impl_.isNull_present_, other->_impl_.isNull_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Column::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EntryProtocol_2eproto_getter, &descriptor_table_EntryProtocol_2eproto_once,
      file_level_metadata_EntryProtocol_2eproto[2]);
}
// ===================================================================

class RowData::_Internal {
 public:
};

RowData::RowData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.RowData)
}
RowData::RowData(const RowData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RowData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.beforecolumns_){from._impl_.beforecolumns_}
    , decltype(_impl_.aftercolumns_){from._impl_.aftercolumns_}
    , decltype(_impl_.props_){from._impl_.props_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.RowData)
}

inline void RowData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.beforecolumns_){arena}
    , decltype(_impl_.aftercolumns_){arena}
    , decltype(_impl_.props_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RowData::~RowData() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.RowData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RowData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_beforecolumns()->~RepeatedPtrField();
  _internal_mutable_aftercolumns()->~RepeatedPtrField();
  _internal_mutable_props()->~RepeatedPtrField();
}

void RowData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RowData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.RowData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_beforecolumns()->Clear();
  _internal_mutable_aftercolumns()->Clear();
  _internal_mutable_props()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RowData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_beforecolumns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aftercolumns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RowData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.RowData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_beforecolumns_size()); i < n; i++) {
    const auto& repfield = this->_internal_beforecolumns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aftercolumns_size()); i < n; i++) {
    const auto& repfield = this->_internal_aftercolumns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.RowData)
  return target;
}

::size_t RowData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.RowData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
  total_size += 1UL * this->_internal_beforecolumns_size();
  for (const auto& msg : this->_internal_beforecolumns()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
  total_size += 1UL * this->_internal_aftercolumns_size();
  for (const auto& msg : this->_internal_aftercolumns()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->_internal_props()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RowData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RowData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RowData::GetClassData() const { return &_class_data_; }


void RowData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RowData*>(&to_msg);
  auto& from = static_cast<const RowData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.RowData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_beforecolumns()->MergeFrom(from._internal_beforecolumns());
  _this->_internal_mutable_aftercolumns()->MergeFrom(from._internal_aftercolumns());
  _this->_internal_mutable_props()->MergeFrom(from._internal_props());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RowData::CopyFrom(const RowData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.RowData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowData::IsInitialized() const {
  return true;
}

void RowData::InternalSwap(RowData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_beforecolumns()->InternalSwap(other->_internal_mutable_beforecolumns());
  _internal_mutable_aftercolumns()->InternalSwap(other->_internal_mutable_aftercolumns());
  _internal_mutable_props()->InternalSwap(other->_internal_mutable_props());
}

::PROTOBUF_NAMESPACE_ID::Metadata RowData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EntryProtocol_2eproto_getter, &descriptor_table_EntryProtocol_2eproto_once,
      file_level_metadata_EntryProtocol_2eproto[3]);
}
// ===================================================================

class RowChange::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::RowChange, _impl_._oneof_case_);
};

RowChange::RowChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.RowChange)
}
RowChange::RowChange(const RowChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RowChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rowdatas_){from._impl_.rowdatas_}
    , decltype(_impl_.props_){from._impl_.props_}
    , decltype(_impl_.sql_) {}

    , decltype(_impl_.ddlschemaname_) {}

    , decltype(_impl_.tableid_) {}

    , decltype(_impl_.eventType_present_){}
    , decltype(_impl_.isDdl_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sql_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sql().empty()) {
    _this->_impl_.sql_.Set(from._internal_sql(), _this->GetArenaForAllocation());
  }
  _impl_.ddlschemaname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ddlschemaname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ddlschemaname().empty()) {
    _this->_impl_.ddlschemaname_.Set(from._internal_ddlschemaname(), _this->GetArenaForAllocation());
  }
  _this->_impl_.tableid_ = from._impl_.tableid_;
  clear_has_eventType_present();
  switch (from.eventType_present_case()) {
    case kEventType: {
      _this->_internal_set_eventtype(from._internal_eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_isDdl_present();
  switch (from.isDdl_present_case()) {
    case kIsDdl: {
      _this->_internal_set_isddl(from._internal_isddl());
      break;
    }
    case ISDDL_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.RowChange)
}

inline void RowChange::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rowdatas_){arena}
    , decltype(_impl_.props_){arena}
    , decltype(_impl_.sql_) {}

    , decltype(_impl_.ddlschemaname_) {}

    , decltype(_impl_.tableid_) { ::int64_t{0} }

    , decltype(_impl_.eventType_present_){}
    , decltype(_impl_.isDdl_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sql_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ddlschemaname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ddlschemaname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_eventType_present();
  clear_has_isDdl_present();
}

RowChange::~RowChange() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.RowChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RowChange::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rowdatas()->~RepeatedPtrField();
  _internal_mutable_props()->~RepeatedPtrField();
  _impl_.sql_.Destroy();
  _impl_.ddlschemaname_.Destroy();
  if (has_eventType_present()) {
    clear_eventType_present();
  }
  if (has_isDdl_present()) {
    clear_isDdl_present();
  }
}

void RowChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RowChange::clear_eventType_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.RowChange)
  switch (eventType_present_case()) {
    case kEventType: {
      // No need to clear
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENTTYPE_PRESENT_NOT_SET;
}

void RowChange::clear_isDdl_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.RowChange)
  switch (isDdl_present_case()) {
    case kIsDdl: {
      // No need to clear
      break;
    }
    case ISDDL_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = ISDDL_PRESENT_NOT_SET;
}


void RowChange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.RowChange)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rowdatas()->Clear();
  _internal_mutable_props()->Clear();
  _impl_.sql_.ClearToEmpty();
  _impl_.ddlschemaname_.ClearToEmpty();
  _impl_.tableid_ = ::int64_t{0};
  clear_eventType_present();
  clear_isDdl_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RowChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 tableId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .com.alibaba.otter.canal.protocol.EventType eventType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_eventtype(static_cast<::com::alibaba::otter::canal::protocol::EventType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool isDdl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _internal_set_isddl(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string sql = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_sql();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.RowChange.sql"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rowdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ddlSchemaName = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_ddlschemaname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.RowChange.ddlSchemaName"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RowChange::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.RowChange)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tableId = 1;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_tableid(), target);
  }

  // .com.alibaba.otter.canal.protocol.EventType eventType = 2;
  if (eventType_present_case() == kEventType) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_eventtype(), target);
  }

  // bool isDdl = 10;
  if (isDdl_present_case() == kIsDdl) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_isddl(), target);
  }

  // string sql = 11;
  if (!this->_internal_sql().empty()) {
    const std::string& _s = this->_internal_sql();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.RowChange.sql");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rowdatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_rowdatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string ddlSchemaName = 14;
  if (!this->_internal_ddlschemaname().empty()) {
    const std::string& _s = this->_internal_ddlschemaname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.RowChange.ddlSchemaName");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.RowChange)
  return target;
}

::size_t RowChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.RowChange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
  total_size += 1UL * this->_internal_rowdatas_size();
  for (const auto& msg : this->_internal_rowdatas()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->_internal_props()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sql = 11;
  if (!this->_internal_sql().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sql());
  }

  // string ddlSchemaName = 14;
  if (!this->_internal_ddlschemaname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ddlschemaname());
  }

  // int64 tableId = 1;
  if (this->_internal_tableid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_tableid());
  }

  switch (eventType_present_case()) {
    // .com.alibaba.otter.canal.protocol.EventType eventType = 2;
    case kEventType: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (isDdl_present_case()) {
    // bool isDdl = 10;
    case kIsDdl: {
      total_size += 2;
      break;
    }
    case ISDDL_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RowChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RowChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RowChange::GetClassData() const { return &_class_data_; }


void RowChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RowChange*>(&to_msg);
  auto& from = static_cast<const RowChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.RowChange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rowdatas()->MergeFrom(from._internal_rowdatas());
  _this->_internal_mutable_props()->MergeFrom(from._internal_props());
  if (!from._internal_sql().empty()) {
    _this->_internal_set_sql(from._internal_sql());
  }
  if (!from._internal_ddlschemaname().empty()) {
    _this->_internal_set_ddlschemaname(from._internal_ddlschemaname());
  }
  if (from._internal_tableid() != 0) {
    _this->_internal_set_tableid(from._internal_tableid());
  }
  switch (from.eventType_present_case()) {
    case kEventType: {
      _this->_internal_set_eventtype(from._internal_eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.isDdl_present_case()) {
    case kIsDdl: {
      _this->_internal_set_isddl(from._internal_isddl());
      break;
    }
    case ISDDL_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RowChange::CopyFrom(const RowChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.RowChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowChange::IsInitialized() const {
  return true;
}

void RowChange::InternalSwap(RowChange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rowdatas()->InternalSwap(other->_internal_mutable_rowdatas());
  _internal_mutable_props()->InternalSwap(other->_internal_mutable_props());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sql_, lhs_arena,
                                       &other->_impl_.sql_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ddlschemaname_, lhs_arena,
                                       &other->_impl_.ddlschemaname_, rhs_arena);

  swap(_impl_.tableid_, other->_impl_.tableid_);
  swap(_impl_.eventType_present_, other->_impl_.eventType_present_);
  swap(_impl_.isDdl_present_, other->_impl_.isDdl_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RowChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EntryProtocol_2eproto_getter, &descriptor_table_EntryProtocol_2eproto_once,
      file_level_metadata_EntryProtocol_2eproto[4]);
}
// ===================================================================

class TransactionBegin::_Internal {
 public:
};

TransactionBegin::TransactionBegin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.TransactionBegin)
}
TransactionBegin::TransactionBegin(const TransactionBegin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionBegin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){from._impl_.props_}
    , decltype(_impl_.transactionid_) {}

    , decltype(_impl_.executetime_) {}

    , decltype(_impl_.threadid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transactionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transactionid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transactionid().empty()) {
    _this->_impl_.transactionid_.Set(from._internal_transactionid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.executetime_, &from._impl_.executetime_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.threadid_) -
    reinterpret_cast<char*>(&_impl_.executetime_)) + sizeof(_impl_.threadid_));
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.TransactionBegin)
}

inline void TransactionBegin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){arena}
    , decltype(_impl_.transactionid_) {}

    , decltype(_impl_.executetime_) { ::int64_t{0} }

    , decltype(_impl_.threadid_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transactionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transactionid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionBegin::~TransactionBegin() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.TransactionBegin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionBegin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_props()->~RepeatedPtrField();
  _impl_.transactionid_.Destroy();
}

void TransactionBegin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.TransactionBegin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_props()->Clear();
  _impl_.transactionid_.ClearToEmpty();
  ::memset(&_impl_.executetime_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.threadid_) -
      reinterpret_cast<char*>(&_impl_.executetime_)) + sizeof(_impl_.threadid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionBegin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 executeTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.executetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string transactionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transactionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.TransactionBegin.transactionId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 threadId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.threadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransactionBegin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.TransactionBegin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 executeTime = 1;
  if (this->_internal_executetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_executetime(), target);
  }

  // string transactionId = 2;
  if (!this->_internal_transactionid().empty()) {
    const std::string& _s = this->_internal_transactionid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.TransactionBegin.transactionId");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 threadId = 4;
  if (this->_internal_threadid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_threadid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.TransactionBegin)
  return target;
}

::size_t TransactionBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.TransactionBegin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->_internal_props()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string transactionId = 2;
  if (!this->_internal_transactionid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_transactionid());
  }

  // int64 executeTime = 1;
  if (this->_internal_executetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_executetime());
  }

  // int64 threadId = 4;
  if (this->_internal_threadid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_threadid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionBegin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionBegin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionBegin::GetClassData() const { return &_class_data_; }


void TransactionBegin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionBegin*>(&to_msg);
  auto& from = static_cast<const TransactionBegin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.TransactionBegin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_props()->MergeFrom(from._internal_props());
  if (!from._internal_transactionid().empty()) {
    _this->_internal_set_transactionid(from._internal_transactionid());
  }
  if (from._internal_executetime() != 0) {
    _this->_internal_set_executetime(from._internal_executetime());
  }
  if (from._internal_threadid() != 0) {
    _this->_internal_set_threadid(from._internal_threadid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionBegin::CopyFrom(const TransactionBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.TransactionBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionBegin::IsInitialized() const {
  return true;
}

void TransactionBegin::InternalSwap(TransactionBegin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_props()->InternalSwap(other->_internal_mutable_props());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transactionid_, lhs_arena,
                                       &other->_impl_.transactionid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionBegin, _impl_.threadid_)
      + sizeof(TransactionBegin::_impl_.threadid_)
      - PROTOBUF_FIELD_OFFSET(TransactionBegin, _impl_.executetime_)>(
          reinterpret_cast<char*>(&_impl_.executetime_),
          reinterpret_cast<char*>(&other->_impl_.executetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionBegin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EntryProtocol_2eproto_getter, &descriptor_table_EntryProtocol_2eproto_once,
      file_level_metadata_EntryProtocol_2eproto[5]);
}
// ===================================================================

class TransactionEnd::_Internal {
 public:
};

TransactionEnd::TransactionEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.TransactionEnd)
}
TransactionEnd::TransactionEnd(const TransactionEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){from._impl_.props_}
    , decltype(_impl_.transactionid_) {}

    , decltype(_impl_.executetime_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transactionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transactionid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transactionid().empty()) {
    _this->_impl_.transactionid_.Set(from._internal_transactionid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.executetime_ = from._impl_.executetime_;
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.TransactionEnd)
}

inline void TransactionEnd::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){arena}
    , decltype(_impl_.transactionid_) {}

    , decltype(_impl_.executetime_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transactionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.transactionid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionEnd::~TransactionEnd() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.TransactionEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionEnd::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_props()->~RepeatedPtrField();
  _impl_.transactionid_.Destroy();
}

void TransactionEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.TransactionEnd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_props()->Clear();
  _impl_.transactionid_.ClearToEmpty();
  _impl_.executetime_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 executeTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.executetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string transactionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transactionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.TransactionEnd.transactionId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_props(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransactionEnd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.TransactionEnd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 executeTime = 1;
  if (this->_internal_executetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_executetime(), target);
  }

  // string transactionId = 2;
  if (!this->_internal_transactionid().empty()) {
    const std::string& _s = this->_internal_transactionid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.TransactionEnd.transactionId");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_props(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.TransactionEnd)
  return target;
}

::size_t TransactionEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.TransactionEnd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  total_size += 1UL * this->_internal_props_size();
  for (const auto& msg : this->_internal_props()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string transactionId = 2;
  if (!this->_internal_transactionid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_transactionid());
  }

  // int64 executeTime = 1;
  if (this->_internal_executetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_executetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionEnd::GetClassData() const { return &_class_data_; }


void TransactionEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionEnd*>(&to_msg);
  auto& from = static_cast<const TransactionEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.TransactionEnd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_props()->MergeFrom(from._internal_props());
  if (!from._internal_transactionid().empty()) {
    _this->_internal_set_transactionid(from._internal_transactionid());
  }
  if (from._internal_executetime() != 0) {
    _this->_internal_set_executetime(from._internal_executetime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionEnd::CopyFrom(const TransactionEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.TransactionEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionEnd::IsInitialized() const {
  return true;
}

void TransactionEnd::InternalSwap(TransactionEnd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_props()->InternalSwap(other->_internal_mutable_props());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transactionid_, lhs_arena,
                                       &other->_impl_.transactionid_, rhs_arena);

  swap(_impl_.executetime_, other->_impl_.executetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EntryProtocol_2eproto_getter, &descriptor_table_EntryProtocol_2eproto_once,
      file_level_metadata_EntryProtocol_2eproto[6]);
}
// ===================================================================

class Pair::_Internal {
 public:
};

Pair::Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Pair)
}
Pair::Pair(const Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Pair)
}

inline void Pair::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Pair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pair::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void Pair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Pair)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Pair.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Pair.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Pair::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Pair)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Pair.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Pair.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Pair)
  return target;
}

::size_t Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Pair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pair::GetClassData() const { return &_class_data_; }


void Pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pair*>(&to_msg);
  auto& from = static_cast<const Pair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Pair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  return true;
}

void Pair::InternalSwap(Pair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EntryProtocol_2eproto_getter, &descriptor_table_EntryProtocol_2eproto_once,
      file_level_metadata_EntryProtocol_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace canal
}  // namespace otter
}  // namespace alibaba
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Entry*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Header*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Column*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Column >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::RowData*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::RowData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::RowData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::RowChange*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::RowChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::RowChange >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::TransactionBegin*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::TransactionBegin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::TransactionBegin >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::TransactionEnd*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::TransactionEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::TransactionEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Pair*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Pair >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

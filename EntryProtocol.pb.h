// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntryProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EntryProtocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_EntryProtocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_EntryProtocol_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EntryProtocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_EntryProtocol_2eproto;
namespace com {
namespace alibaba {
namespace otter {
namespace canal {
namespace protocol {
class Column;
struct ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Pair;
struct PairDefaultTypeInternal;
extern PairDefaultTypeInternal _Pair_default_instance_;
class RowChange;
struct RowChangeDefaultTypeInternal;
extern RowChangeDefaultTypeInternal _RowChange_default_instance_;
class RowData;
struct RowDataDefaultTypeInternal;
extern RowDataDefaultTypeInternal _RowData_default_instance_;
class TransactionBegin;
struct TransactionBeginDefaultTypeInternal;
extern TransactionBeginDefaultTypeInternal _TransactionBegin_default_instance_;
class TransactionEnd;
struct TransactionEndDefaultTypeInternal;
extern TransactionEndDefaultTypeInternal _TransactionEnd_default_instance_;
}  // namespace protocol
}  // namespace canal
}  // namespace otter
}  // namespace alibaba
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template <>
::com::alibaba::otter::canal::protocol::Column* Arena::CreateMaybeMessage<::com::alibaba::otter::canal::protocol::Column>(Arena*);
template <>
::com::alibaba::otter::canal::protocol::Entry* Arena::CreateMaybeMessage<::com::alibaba::otter::canal::protocol::Entry>(Arena*);
template <>
::com::alibaba::otter::canal::protocol::Header* Arena::CreateMaybeMessage<::com::alibaba::otter::canal::protocol::Header>(Arena*);
template <>
::com::alibaba::otter::canal::protocol::Pair* Arena::CreateMaybeMessage<::com::alibaba::otter::canal::protocol::Pair>(Arena*);
template <>
::com::alibaba::otter::canal::protocol::RowChange* Arena::CreateMaybeMessage<::com::alibaba::otter::canal::protocol::RowChange>(Arena*);
template <>
::com::alibaba::otter::canal::protocol::RowData* Arena::CreateMaybeMessage<::com::alibaba::otter::canal::protocol::RowData>(Arena*);
template <>
::com::alibaba::otter::canal::protocol::TransactionBegin* Arena::CreateMaybeMessage<::com::alibaba::otter::canal::protocol::TransactionBegin>(Arena*);
template <>
::com::alibaba::otter::canal::protocol::TransactionEnd* Arena::CreateMaybeMessage<::com::alibaba::otter::canal::protocol::TransactionEnd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace com {
namespace alibaba {
namespace otter {
namespace canal {
namespace protocol {
enum EntryType : int {
  ENTRYTYPECOMPATIBLEPROTO2 = 0,
  TRANSACTIONBEGIN = 1,
  ROWDATA = 2,
  TRANSACTIONEND = 3,
  HEARTBEAT = 4,
  GTIDLOG = 5,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EntryType_IsValid(int value);
constexpr EntryType EntryType_MIN = static_cast<EntryType>(0);
constexpr EntryType EntryType_MAX = static_cast<EntryType>(5);
constexpr int EntryType_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
EntryType_descriptor();
template <typename T>
const std::string& EntryType_Name(T value) {
  static_assert(std::is_same<T, EntryType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EntryType_Name().");
  return EntryType_Name(static_cast<EntryType>(value));
}
template <>
inline const std::string& EntryType_Name(EntryType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<EntryType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool EntryType_Parse(absl::string_view name, EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryType>(
      EntryType_descriptor(), name, value);
}
enum EventType : int {
  EVENTTYPECOMPATIBLEPROTO2 = 0,
  INSERT = 1,
  UPDATE = 2,
  DELETE = 3,
  CREATE = 4,
  ALTER = 5,
  ERASE = 6,
  QUERY = 7,
  TRUNCATE = 8,
  RENAME = 9,
  CINDEX = 10,
  DINDEX = 11,
  GTID = 12,
  XACOMMIT = 13,
  XAROLLBACK = 14,
  MHEARTBEAT = 15,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = static_cast<EventType>(0);
constexpr EventType EventType_MAX = static_cast<EventType>(15);
constexpr int EventType_ARRAYSIZE = 15 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
EventType_descriptor();
template <typename T>
const std::string& EventType_Name(T value) {
  static_assert(std::is_same<T, EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return EventType_Name(static_cast<EventType>(value));
}
template <>
inline const std::string& EventType_Name(EventType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<EventType_descriptor,
                                                 0, 15>(
      static_cast<int>(value));
}
inline bool EventType_Parse(absl::string_view name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
      EventType_descriptor(), name, value);
}
enum Type : int {
  TYPECOMPATIBLEPROTO2 = 0,
  ORACLE = 1,
  MYSQL = 2,
  PGSQL = 3,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Type_IsValid(int value);
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(3);
constexpr int Type_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Type_descriptor();
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const std::string& Type_Name(Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Type_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Type_Parse(absl::string_view name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
      Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alibaba.otter.canal.protocol.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  enum EntryTypePresentCase {
    kEntryType = 2,
    ENTRYTYPE_PRESENT_NOT_SET = 0,
  };

  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entry& from) {
    Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.alibaba.otter.canal.protocol.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreValueFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kEntryTypeFieldNumber = 2,
  };
  // bytes storeValue = 3;
  void clear_storevalue() ;
  const std::string& storevalue() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_storevalue(Arg_&& arg, Args_... args);
  std::string* mutable_storevalue();
  PROTOBUF_NODISCARD std::string* release_storevalue();
  void set_allocated_storevalue(std::string* ptr);

  private:
  const std::string& _internal_storevalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storevalue(
      const std::string& value);
  std::string* _internal_mutable_storevalue();

  public:
  // .com.alibaba.otter.canal.protocol.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::com::alibaba::otter::canal::protocol::Header& header() const;
  PROTOBUF_NODISCARD ::com::alibaba::otter::canal::protocol::Header* release_header();
  ::com::alibaba::otter::canal::protocol::Header* mutable_header();
  void set_allocated_header(::com::alibaba::otter::canal::protocol::Header* header);
  private:
  const ::com::alibaba::otter::canal::protocol::Header& _internal_header() const;
  ::com::alibaba::otter::canal::protocol::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::com::alibaba::otter::canal::protocol::Header* header);
  ::com::alibaba::otter::canal::protocol::Header* unsafe_arena_release_header();
  // .com.alibaba.otter.canal.protocol.EntryType entryType = 2;
  bool has_entrytype() const;
  void clear_entrytype() ;
  ::com::alibaba::otter::canal::protocol::EntryType entrytype() const;
  void set_entrytype(::com::alibaba::otter::canal::protocol::EntryType value);

  private:
  ::com::alibaba::otter::canal::protocol::EntryType _internal_entrytype() const;
  void _internal_set_entrytype(::com::alibaba::otter::canal::protocol::EntryType value);

  public:
  void clear_entryType_present();
  EntryTypePresentCase entryType_present_case() const;
  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.Entry)
 private:
  class _Internal;
  void set_has_entrytype();

  inline bool has_entryType_present() const;
  inline void clear_has_entryType_present();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storevalue_;
    ::com::alibaba::otter::canal::protocol::Header* header_;
    union EntryTypePresentUnion {
      constexpr EntryTypePresentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int entrytype_;
    } entryType_present_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EntryProtocol_2eproto;
};// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alibaba.otter.canal.protocol.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  enum VersionPresentCase {
    kVersion = 1,
    VERSION_PRESENT_NOT_SET = 0,
  };

  enum SourceTypePresentCase {
    kSourceType = 7,
    SOURCETYPE_PRESENT_NOT_SET = 0,
  };

  enum EventTypePresentCase {
    kEventType = 11,
    EVENTTYPE_PRESENT_NOT_SET = 0,
  };

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.alibaba.otter.canal.protocol.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 12,
    kLogfileNameFieldNumber = 2,
    kServerenCodeFieldNumber = 5,
    kSchemaNameFieldNumber = 8,
    kTableNameFieldNumber = 9,
    kGtidFieldNumber = 13,
    kLogfileOffsetFieldNumber = 3,
    kServerIdFieldNumber = 4,
    kExecuteTimeFieldNumber = 6,
    kEventLengthFieldNumber = 10,
    kVersionFieldNumber = 1,
    kSourceTypeFieldNumber = 7,
    kEventTypeFieldNumber = 11,
  };
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  ::com::alibaba::otter::canal::protocol::Pair* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
      mutable_props();
  private:
  const ::com::alibaba::otter::canal::protocol::Pair& _internal_props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* _internal_add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>& _internal_props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>* _internal_mutable_props();
  public:
  const ::com::alibaba::otter::canal::protocol::Pair& props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
      props() const;
  // string logfileName = 2;
  void clear_logfilename() ;
  const std::string& logfilename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logfilename(Arg_&& arg, Args_... args);
  std::string* mutable_logfilename();
  PROTOBUF_NODISCARD std::string* release_logfilename();
  void set_allocated_logfilename(std::string* ptr);

  private:
  const std::string& _internal_logfilename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logfilename(
      const std::string& value);
  std::string* _internal_mutable_logfilename();

  public:
  // string serverenCode = 5;
  void clear_serverencode() ;
  const std::string& serverencode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_serverencode(Arg_&& arg, Args_... args);
  std::string* mutable_serverencode();
  PROTOBUF_NODISCARD std::string* release_serverencode();
  void set_allocated_serverencode(std::string* ptr);

  private:
  const std::string& _internal_serverencode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverencode(
      const std::string& value);
  std::string* _internal_mutable_serverencode();

  public:
  // string schemaName = 8;
  void clear_schemaname() ;
  const std::string& schemaname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schemaname(Arg_&& arg, Args_... args);
  std::string* mutable_schemaname();
  PROTOBUF_NODISCARD std::string* release_schemaname();
  void set_allocated_schemaname(std::string* ptr);

  private:
  const std::string& _internal_schemaname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schemaname(
      const std::string& value);
  std::string* _internal_mutable_schemaname();

  public:
  // string tableName = 9;
  void clear_tablename() ;
  const std::string& tablename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tablename(Arg_&& arg, Args_... args);
  std::string* mutable_tablename();
  PROTOBUF_NODISCARD std::string* release_tablename();
  void set_allocated_tablename(std::string* ptr);

  private:
  const std::string& _internal_tablename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tablename(
      const std::string& value);
  std::string* _internal_mutable_tablename();

  public:
  // string gtid = 13;
  void clear_gtid() ;
  const std::string& gtid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gtid(Arg_&& arg, Args_... args);
  std::string* mutable_gtid();
  PROTOBUF_NODISCARD std::string* release_gtid();
  void set_allocated_gtid(std::string* ptr);

  private:
  const std::string& _internal_gtid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gtid(
      const std::string& value);
  std::string* _internal_mutable_gtid();

  public:
  // int64 logfileOffset = 3;
  void clear_logfileoffset() ;
  ::int64_t logfileoffset() const;
  void set_logfileoffset(::int64_t value);

  private:
  ::int64_t _internal_logfileoffset() const;
  void _internal_set_logfileoffset(::int64_t value);

  public:
  // int64 serverId = 4;
  void clear_serverid() ;
  ::int64_t serverid() const;
  void set_serverid(::int64_t value);

  private:
  ::int64_t _internal_serverid() const;
  void _internal_set_serverid(::int64_t value);

  public:
  // int64 executeTime = 6;
  void clear_executetime() ;
  ::int64_t executetime() const;
  void set_executetime(::int64_t value);

  private:
  ::int64_t _internal_executetime() const;
  void _internal_set_executetime(::int64_t value);

  public:
  // int64 eventLength = 10;
  void clear_eventlength() ;
  ::int64_t eventlength() const;
  void set_eventlength(::int64_t value);

  private:
  ::int64_t _internal_eventlength() const;
  void _internal_set_eventlength(::int64_t value);

  public:
  // int32 version = 1;
  bool has_version() const;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // .com.alibaba.otter.canal.protocol.Type sourceType = 7;
  bool has_sourcetype() const;
  void clear_sourcetype() ;
  ::com::alibaba::otter::canal::protocol::Type sourcetype() const;
  void set_sourcetype(::com::alibaba::otter::canal::protocol::Type value);

  private:
  ::com::alibaba::otter::canal::protocol::Type _internal_sourcetype() const;
  void _internal_set_sourcetype(::com::alibaba::otter::canal::protocol::Type value);

  public:
  // .com.alibaba.otter.canal.protocol.EventType eventType = 11;
  bool has_eventtype() const;
  void clear_eventtype() ;
  ::com::alibaba::otter::canal::protocol::EventType eventtype() const;
  void set_eventtype(::com::alibaba::otter::canal::protocol::EventType value);

  private:
  ::com::alibaba::otter::canal::protocol::EventType _internal_eventtype() const;
  void _internal_set_eventtype(::com::alibaba::otter::canal::protocol::EventType value);

  public:
  void clear_version_present();
  VersionPresentCase version_present_case() const;
  void clear_sourceType_present();
  SourceTypePresentCase sourceType_present_case() const;
  void clear_eventType_present();
  EventTypePresentCase eventType_present_case() const;
  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.Header)
 private:
  class _Internal;
  void set_has_version();
  void set_has_sourcetype();
  void set_has_eventtype();

  inline bool has_version_present() const;
  inline void clear_has_version_present();

  inline bool has_sourceType_present() const;
  inline void clear_has_sourceType_present();

  inline bool has_eventType_present() const;
  inline void clear_has_eventType_present();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair > props_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logfilename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverencode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schemaname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gtid_;
    ::int64_t logfileoffset_;
    ::int64_t serverid_;
    ::int64_t executetime_;
    ::int64_t eventlength_;
    union VersionPresentUnion {
      constexpr VersionPresentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::int32_t version_;
    } version_present_;
    union SourceTypePresentUnion {
      constexpr SourceTypePresentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int sourcetype_;
    } sourceType_present_;
    union EventTypePresentUnion {
      constexpr EventTypePresentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int eventtype_;
    } eventType_present_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EntryProtocol_2eproto;
};// -------------------------------------------------------------------

class Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alibaba.otter.canal.protocol.Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  ~Column() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Column(const Column& from);
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Column& default_instance() {
    return *internal_default_instance();
  }
  enum IsNullPresentCase {
    kIsNull = 6,
    ISNULL_PRESENT_NOT_SET = 0,
  };

  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Column& from) {
    Column::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.alibaba.otter.canal.protocol.Column";
  }
  protected:
  explicit Column(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 7,
    kNameFieldNumber = 3,
    kValueFieldNumber = 8,
    kMysqlTypeFieldNumber = 10,
    kIndexFieldNumber = 1,
    kSqlTypeFieldNumber = 2,
    kIsKeyFieldNumber = 4,
    kUpdatedFieldNumber = 5,
    kLengthFieldNumber = 9,
    kIsNullFieldNumber = 6,
  };
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  ::com::alibaba::otter::canal::protocol::Pair* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
      mutable_props();
  private:
  const ::com::alibaba::otter::canal::protocol::Pair& _internal_props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* _internal_add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>& _internal_props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>* _internal_mutable_props();
  public:
  const ::com::alibaba::otter::canal::protocol::Pair& props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
      props() const;
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string value = 8;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // string mysqlType = 10;
  void clear_mysqltype() ;
  const std::string& mysqltype() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mysqltype(Arg_&& arg, Args_... args);
  std::string* mutable_mysqltype();
  PROTOBUF_NODISCARD std::string* release_mysqltype();
  void set_allocated_mysqltype(std::string* ptr);

  private:
  const std::string& _internal_mysqltype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mysqltype(
      const std::string& value);
  std::string* _internal_mutable_mysqltype();

  public:
  // int32 index = 1;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 sqlType = 2;
  void clear_sqltype() ;
  ::int32_t sqltype() const;
  void set_sqltype(::int32_t value);

  private:
  ::int32_t _internal_sqltype() const;
  void _internal_set_sqltype(::int32_t value);

  public:
  // bool isKey = 4;
  void clear_iskey() ;
  bool iskey() const;
  void set_iskey(bool value);

  private:
  bool _internal_iskey() const;
  void _internal_set_iskey(bool value);

  public:
  // bool updated = 5;
  void clear_updated() ;
  bool updated() const;
  void set_updated(bool value);

  private:
  bool _internal_updated() const;
  void _internal_set_updated(bool value);

  public:
  // int32 length = 9;
  void clear_length() ;
  ::int32_t length() const;
  void set_length(::int32_t value);

  private:
  ::int32_t _internal_length() const;
  void _internal_set_length(::int32_t value);

  public:
  // bool isNull = 6;
  bool has_isnull() const;
  void clear_isnull() ;
  bool isnull() const;
  void set_isnull(bool value);

  private:
  bool _internal_isnull() const;
  void _internal_set_isnull(bool value);

  public:
  void clear_isNull_present();
  IsNullPresentCase isNull_present_case() const;
  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.Column)
 private:
  class _Internal;
  void set_has_isnull();

  inline bool has_isNull_present() const;
  inline void clear_has_isNull_present();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair > props_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mysqltype_;
    ::int32_t index_;
    ::int32_t sqltype_;
    bool iskey_;
    bool updated_;
    ::int32_t length_;
    union IsNullPresentUnion {
      constexpr IsNullPresentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool isnull_;
    } isNull_present_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EntryProtocol_2eproto;
};// -------------------------------------------------------------------

class RowData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alibaba.otter.canal.protocol.RowData) */ {
 public:
  inline RowData() : RowData(nullptr) {}
  ~RowData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RowData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RowData(const RowData& from);
  RowData(RowData&& from) noexcept
    : RowData() {
    *this = ::std::move(from);
  }

  inline RowData& operator=(const RowData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowData& operator=(RowData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RowData* internal_default_instance() {
    return reinterpret_cast<const RowData*>(
               &_RowData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RowData& a, RowData& b) {
    a.Swap(&b);
  }
  inline void Swap(RowData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RowData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RowData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RowData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RowData& from) {
    RowData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.alibaba.otter.canal.protocol.RowData";
  }
  protected:
  explicit RowData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeforeColumnsFieldNumber = 1,
    kAfterColumnsFieldNumber = 2,
    kPropsFieldNumber = 3,
  };
  // repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
  int beforecolumns_size() const;
  private:
  int _internal_beforecolumns_size() const;

  public:
  void clear_beforecolumns() ;
  ::com::alibaba::otter::canal::protocol::Column* mutable_beforecolumns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column >*
      mutable_beforecolumns();
  private:
  const ::com::alibaba::otter::canal::protocol::Column& _internal_beforecolumns(int index) const;
  ::com::alibaba::otter::canal::protocol::Column* _internal_add_beforecolumns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Column>& _internal_beforecolumns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Column>* _internal_mutable_beforecolumns();
  public:
  const ::com::alibaba::otter::canal::protocol::Column& beforecolumns(int index) const;
  ::com::alibaba::otter::canal::protocol::Column* add_beforecolumns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column >&
      beforecolumns() const;
  // repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
  int aftercolumns_size() const;
  private:
  int _internal_aftercolumns_size() const;

  public:
  void clear_aftercolumns() ;
  ::com::alibaba::otter::canal::protocol::Column* mutable_aftercolumns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column >*
      mutable_aftercolumns();
  private:
  const ::com::alibaba::otter::canal::protocol::Column& _internal_aftercolumns(int index) const;
  ::com::alibaba::otter::canal::protocol::Column* _internal_add_aftercolumns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Column>& _internal_aftercolumns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Column>* _internal_mutable_aftercolumns();
  public:
  const ::com::alibaba::otter::canal::protocol::Column& aftercolumns(int index) const;
  ::com::alibaba::otter::canal::protocol::Column* add_aftercolumns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column >&
      aftercolumns() const;
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  ::com::alibaba::otter::canal::protocol::Pair* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
      mutable_props();
  private:
  const ::com::alibaba::otter::canal::protocol::Pair& _internal_props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* _internal_add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>& _internal_props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>* _internal_mutable_props();
  public:
  const ::com::alibaba::otter::canal::protocol::Pair& props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
      props() const;
  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.RowData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column > beforecolumns_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column > aftercolumns_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair > props_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EntryProtocol_2eproto;
};// -------------------------------------------------------------------

class RowChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alibaba.otter.canal.protocol.RowChange) */ {
 public:
  inline RowChange() : RowChange(nullptr) {}
  ~RowChange() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RowChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RowChange(const RowChange& from);
  RowChange(RowChange&& from) noexcept
    : RowChange() {
    *this = ::std::move(from);
  }

  inline RowChange& operator=(const RowChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowChange& operator=(RowChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowChange& default_instance() {
    return *internal_default_instance();
  }
  enum EventTypePresentCase {
    kEventType = 2,
    EVENTTYPE_PRESENT_NOT_SET = 0,
  };

  enum IsDdlPresentCase {
    kIsDdl = 10,
    ISDDL_PRESENT_NOT_SET = 0,
  };

  static inline const RowChange* internal_default_instance() {
    return reinterpret_cast<const RowChange*>(
               &_RowChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RowChange& a, RowChange& b) {
    a.Swap(&b);
  }
  inline void Swap(RowChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowChange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RowChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RowChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RowChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RowChange& from) {
    RowChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.alibaba.otter.canal.protocol.RowChange";
  }
  protected:
  explicit RowChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowDatasFieldNumber = 12,
    kPropsFieldNumber = 13,
    kSqlFieldNumber = 11,
    kDdlSchemaNameFieldNumber = 14,
    kTableIdFieldNumber = 1,
    kEventTypeFieldNumber = 2,
    kIsDdlFieldNumber = 10,
  };
  // repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
  int rowdatas_size() const;
  private:
  int _internal_rowdatas_size() const;

  public:
  void clear_rowdatas() ;
  ::com::alibaba::otter::canal::protocol::RowData* mutable_rowdatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::RowData >*
      mutable_rowdatas();
  private:
  const ::com::alibaba::otter::canal::protocol::RowData& _internal_rowdatas(int index) const;
  ::com::alibaba::otter::canal::protocol::RowData* _internal_add_rowdatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::RowData>& _internal_rowdatas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::RowData>* _internal_mutable_rowdatas();
  public:
  const ::com::alibaba::otter::canal::protocol::RowData& rowdatas(int index) const;
  ::com::alibaba::otter::canal::protocol::RowData* add_rowdatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::RowData >&
      rowdatas() const;
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  ::com::alibaba::otter::canal::protocol::Pair* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
      mutable_props();
  private:
  const ::com::alibaba::otter::canal::protocol::Pair& _internal_props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* _internal_add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>& _internal_props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>* _internal_mutable_props();
  public:
  const ::com::alibaba::otter::canal::protocol::Pair& props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
      props() const;
  // string sql = 11;
  void clear_sql() ;
  const std::string& sql() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sql(Arg_&& arg, Args_... args);
  std::string* mutable_sql();
  PROTOBUF_NODISCARD std::string* release_sql();
  void set_allocated_sql(std::string* ptr);

  private:
  const std::string& _internal_sql() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql(
      const std::string& value);
  std::string* _internal_mutable_sql();

  public:
  // string ddlSchemaName = 14;
  void clear_ddlschemaname() ;
  const std::string& ddlschemaname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ddlschemaname(Arg_&& arg, Args_... args);
  std::string* mutable_ddlschemaname();
  PROTOBUF_NODISCARD std::string* release_ddlschemaname();
  void set_allocated_ddlschemaname(std::string* ptr);

  private:
  const std::string& _internal_ddlschemaname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ddlschemaname(
      const std::string& value);
  std::string* _internal_mutable_ddlschemaname();

  public:
  // int64 tableId = 1;
  void clear_tableid() ;
  ::int64_t tableid() const;
  void set_tableid(::int64_t value);

  private:
  ::int64_t _internal_tableid() const;
  void _internal_set_tableid(::int64_t value);

  public:
  // .com.alibaba.otter.canal.protocol.EventType eventType = 2;
  bool has_eventtype() const;
  void clear_eventtype() ;
  ::com::alibaba::otter::canal::protocol::EventType eventtype() const;
  void set_eventtype(::com::alibaba::otter::canal::protocol::EventType value);

  private:
  ::com::alibaba::otter::canal::protocol::EventType _internal_eventtype() const;
  void _internal_set_eventtype(::com::alibaba::otter::canal::protocol::EventType value);

  public:
  // bool isDdl = 10;
  bool has_isddl() const;
  void clear_isddl() ;
  bool isddl() const;
  void set_isddl(bool value);

  private:
  bool _internal_isddl() const;
  void _internal_set_isddl(bool value);

  public:
  void clear_eventType_present();
  EventTypePresentCase eventType_present_case() const;
  void clear_isDdl_present();
  IsDdlPresentCase isDdl_present_case() const;
  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.RowChange)
 private:
  class _Internal;
  void set_has_eventtype();
  void set_has_isddl();

  inline bool has_eventType_present() const;
  inline void clear_has_eventType_present();

  inline bool has_isDdl_present() const;
  inline void clear_has_isDdl_present();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::RowData > rowdatas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair > props_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ddlschemaname_;
    ::int64_t tableid_;
    union EventTypePresentUnion {
      constexpr EventTypePresentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int eventtype_;
    } eventType_present_;
    union IsDdlPresentUnion {
      constexpr IsDdlPresentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool isddl_;
    } isDdl_present_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EntryProtocol_2eproto;
};// -------------------------------------------------------------------

class TransactionBegin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alibaba.otter.canal.protocol.TransactionBegin) */ {
 public:
  inline TransactionBegin() : TransactionBegin(nullptr) {}
  ~TransactionBegin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransactionBegin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionBegin(const TransactionBegin& from);
  TransactionBegin(TransactionBegin&& from) noexcept
    : TransactionBegin() {
    *this = ::std::move(from);
  }

  inline TransactionBegin& operator=(const TransactionBegin& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionBegin& operator=(TransactionBegin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionBegin& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionBegin* internal_default_instance() {
    return reinterpret_cast<const TransactionBegin*>(
               &_TransactionBegin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransactionBegin& a, TransactionBegin& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionBegin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionBegin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionBegin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionBegin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionBegin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionBegin& from) {
    TransactionBegin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionBegin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.alibaba.otter.canal.protocol.TransactionBegin";
  }
  protected:
  explicit TransactionBegin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 3,
    kTransactionIdFieldNumber = 2,
    kExecuteTimeFieldNumber = 1,
    kThreadIdFieldNumber = 4,
  };
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  ::com::alibaba::otter::canal::protocol::Pair* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
      mutable_props();
  private:
  const ::com::alibaba::otter::canal::protocol::Pair& _internal_props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* _internal_add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>& _internal_props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>* _internal_mutable_props();
  public:
  const ::com::alibaba::otter::canal::protocol::Pair& props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
      props() const;
  // string transactionId = 2;
  void clear_transactionid() ;
  const std::string& transactionid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transactionid(Arg_&& arg, Args_... args);
  std::string* mutable_transactionid();
  PROTOBUF_NODISCARD std::string* release_transactionid();
  void set_allocated_transactionid(std::string* ptr);

  private:
  const std::string& _internal_transactionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactionid(
      const std::string& value);
  std::string* _internal_mutable_transactionid();

  public:
  // int64 executeTime = 1;
  void clear_executetime() ;
  ::int64_t executetime() const;
  void set_executetime(::int64_t value);

  private:
  ::int64_t _internal_executetime() const;
  void _internal_set_executetime(::int64_t value);

  public:
  // int64 threadId = 4;
  void clear_threadid() ;
  ::int64_t threadid() const;
  void set_threadid(::int64_t value);

  private:
  ::int64_t _internal_threadid() const;
  void _internal_set_threadid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.TransactionBegin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair > props_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionid_;
    ::int64_t executetime_;
    ::int64_t threadid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EntryProtocol_2eproto;
};// -------------------------------------------------------------------

class TransactionEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alibaba.otter.canal.protocol.TransactionEnd) */ {
 public:
  inline TransactionEnd() : TransactionEnd(nullptr) {}
  ~TransactionEnd() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransactionEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionEnd(const TransactionEnd& from);
  TransactionEnd(TransactionEnd&& from) noexcept
    : TransactionEnd() {
    *this = ::std::move(from);
  }

  inline TransactionEnd& operator=(const TransactionEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionEnd& operator=(TransactionEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionEnd* internal_default_instance() {
    return reinterpret_cast<const TransactionEnd*>(
               &_TransactionEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransactionEnd& a, TransactionEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionEnd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionEnd& from) {
    TransactionEnd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.alibaba.otter.canal.protocol.TransactionEnd";
  }
  protected:
  explicit TransactionEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 3,
    kTransactionIdFieldNumber = 2,
    kExecuteTimeFieldNumber = 1,
  };
  // repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  ::com::alibaba::otter::canal::protocol::Pair* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
      mutable_props();
  private:
  const ::com::alibaba::otter::canal::protocol::Pair& _internal_props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* _internal_add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>& _internal_props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>* _internal_mutable_props();
  public:
  const ::com::alibaba::otter::canal::protocol::Pair& props(int index) const;
  ::com::alibaba::otter::canal::protocol::Pair* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
      props() const;
  // string transactionId = 2;
  void clear_transactionid() ;
  const std::string& transactionid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transactionid(Arg_&& arg, Args_... args);
  std::string* mutable_transactionid();
  PROTOBUF_NODISCARD std::string* release_transactionid();
  void set_allocated_transactionid(std::string* ptr);

  private:
  const std::string& _internal_transactionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactionid(
      const std::string& value);
  std::string* _internal_mutable_transactionid();

  public:
  // int64 executeTime = 1;
  void clear_executetime() ;
  ::int64_t executetime() const;
  void set_executetime(::int64_t value);

  private:
  ::int64_t _internal_executetime() const;
  void _internal_set_executetime(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.TransactionEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair > props_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionid_;
    ::int64_t executetime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EntryProtocol_2eproto;
};// -------------------------------------------------------------------

class Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.alibaba.otter.canal.protocol.Pair) */ {
 public:
  inline Pair() : Pair(nullptr) {}
  ~Pair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pair(const Pair& from);
  Pair(Pair&& from) noexcept
    : Pair() {
    *this = ::std::move(from);
  }

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pair& operator=(Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pair* internal_default_instance() {
    return reinterpret_cast<const Pair*>(
               &_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Pair& a, Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pair& from) {
    Pair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.alibaba.otter.canal.protocol.Pair";
  }
  protected:
  explicit Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:com.alibaba.otter.canal.protocol.Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EntryProtocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Entry

// .com.alibaba.otter.canal.protocol.Header header = 1;
inline bool Entry::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void Entry::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::alibaba::otter::canal::protocol::Header& Entry::_internal_header() const {
  const ::com::alibaba::otter::canal::protocol::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::alibaba::otter::canal::protocol::Header&>(
      ::com::alibaba::otter::canal::protocol::_Header_default_instance_);
}
inline const ::com::alibaba::otter::canal::protocol::Header& Entry::header() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Entry.header)
  return _internal_header();
}
inline void Entry::unsafe_arena_set_allocated_header(
    ::com::alibaba::otter::canal::protocol::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.alibaba.otter.canal.protocol.Entry.header)
}
inline ::com::alibaba::otter::canal::protocol::Header* Entry::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::alibaba::otter::canal::protocol::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::alibaba::otter::canal::protocol::Header* Entry::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Entry.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::alibaba::otter::canal::protocol::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::com::alibaba::otter::canal::protocol::Header* Entry::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::alibaba::otter::canal::protocol::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::com::alibaba::otter::canal::protocol::Header* Entry::mutable_header() {
  ::com::alibaba::otter::canal::protocol::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Entry.header)
  return _msg;
}
inline void Entry::set_allocated_header(::com::alibaba::otter::canal::protocol::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Entry.header)
}

// .com.alibaba.otter.canal.protocol.EntryType entryType = 2;
inline bool Entry::has_entrytype() const {
  return entryType_present_case() == kEntryType;
}
inline void Entry::set_has_entrytype() {
  _impl_._oneof_case_[0] = kEntryType;
}
inline void Entry::clear_entrytype() {
  if (entryType_present_case() == kEntryType) {
    _impl_.entryType_present_.entrytype_ = 0;
    clear_has_entryType_present();
  }
}
inline ::com::alibaba::otter::canal::protocol::EntryType Entry::entrytype() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Entry.entryType)
  return _internal_entrytype();
}
inline void Entry::set_entrytype(::com::alibaba::otter::canal::protocol::EntryType value) {
   _internal_set_entrytype(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Entry.entryType)
}
inline ::com::alibaba::otter::canal::protocol::EntryType Entry::_internal_entrytype() const {
  if (entryType_present_case() == kEntryType) {
    return static_cast<::com::alibaba::otter::canal::protocol::EntryType>(_impl_.entryType_present_.entrytype_);
  }
  return static_cast<::com::alibaba::otter::canal::protocol::EntryType>(0);
}
inline void Entry::_internal_set_entrytype(::com::alibaba::otter::canal::protocol::EntryType value) {
  if (entryType_present_case() != kEntryType) {
    clear_entryType_present();
    set_has_entrytype();
  }
  _impl_.entryType_present_.entrytype_ = value;
}

// bytes storeValue = 3;
inline void Entry::clear_storevalue() {
  _impl_.storevalue_.ClearToEmpty();
}
inline const std::string& Entry::storevalue() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Entry.storeValue)
  return _internal_storevalue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Entry::set_storevalue(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.storevalue_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Entry.storeValue)
}
inline std::string* Entry::mutable_storevalue() {
  std::string* _s = _internal_mutable_storevalue();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Entry.storeValue)
  return _s;
}
inline const std::string& Entry::_internal_storevalue() const {
  return _impl_.storevalue_.Get();
}
inline void Entry::_internal_set_storevalue(const std::string& value) {
  ;


  _impl_.storevalue_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_storevalue() {
  ;
  return _impl_.storevalue_.Mutable( GetArenaForAllocation());
}
inline std::string* Entry::release_storevalue() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Entry.storeValue)
  return _impl_.storevalue_.Release();
}
inline void Entry::set_allocated_storevalue(std::string* value) {
  _impl_.storevalue_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.storevalue_.IsDefault()) {
          _impl_.storevalue_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Entry.storeValue)
}

inline bool Entry::has_entryType_present() const {
  return entryType_present_case() != ENTRYTYPE_PRESENT_NOT_SET;
}
inline void Entry::clear_has_entryType_present() {
  _impl_._oneof_case_[0] = ENTRYTYPE_PRESENT_NOT_SET;
}
inline Entry::EntryTypePresentCase Entry::entryType_present_case() const {
  return Entry::EntryTypePresentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Header

// int32 version = 1;
inline bool Header::has_version() const {
  return version_present_case() == kVersion;
}
inline void Header::set_has_version() {
  _impl_._oneof_case_[0] = kVersion;
}
inline void Header::clear_version() {
  if (version_present_case() == kVersion) {
    _impl_.version_present_.version_ = 0;
    clear_has_version_present();
  }
}
inline ::int32_t Header::version() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.version)
  return _internal_version();
}
inline void Header::set_version(::int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.version)
}
inline ::int32_t Header::_internal_version() const {
  if (version_present_case() == kVersion) {
    return _impl_.version_present_.version_;
  }
  return 0;
}
inline void Header::_internal_set_version(::int32_t value) {
  if (version_present_case() != kVersion) {
    clear_version_present();
    set_has_version();
  }
  _impl_.version_present_.version_ = value;
}

// string logfileName = 2;
inline void Header::clear_logfilename() {
  _impl_.logfilename_.ClearToEmpty();
}
inline const std::string& Header::logfilename() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.logfileName)
  return _internal_logfilename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_logfilename(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.logfilename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.logfileName)
}
inline std::string* Header::mutable_logfilename() {
  std::string* _s = _internal_mutable_logfilename();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Header.logfileName)
  return _s;
}
inline const std::string& Header::_internal_logfilename() const {
  return _impl_.logfilename_.Get();
}
inline void Header::_internal_set_logfilename(const std::string& value) {
  ;


  _impl_.logfilename_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_logfilename() {
  ;
  return _impl_.logfilename_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_logfilename() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Header.logfileName)
  return _impl_.logfilename_.Release();
}
inline void Header::set_allocated_logfilename(std::string* value) {
  _impl_.logfilename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logfilename_.IsDefault()) {
          _impl_.logfilename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Header.logfileName)
}

// int64 logfileOffset = 3;
inline void Header::clear_logfileoffset() {
  _impl_.logfileoffset_ = ::int64_t{0};
}
inline ::int64_t Header::logfileoffset() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.logfileOffset)
  return _internal_logfileoffset();
}
inline void Header::set_logfileoffset(::int64_t value) {
  _internal_set_logfileoffset(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.logfileOffset)
}
inline ::int64_t Header::_internal_logfileoffset() const {
  return _impl_.logfileoffset_;
}
inline void Header::_internal_set_logfileoffset(::int64_t value) {
  ;
  _impl_.logfileoffset_ = value;
}

// int64 serverId = 4;
inline void Header::clear_serverid() {
  _impl_.serverid_ = ::int64_t{0};
}
inline ::int64_t Header::serverid() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.serverId)
  return _internal_serverid();
}
inline void Header::set_serverid(::int64_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.serverId)
}
inline ::int64_t Header::_internal_serverid() const {
  return _impl_.serverid_;
}
inline void Header::_internal_set_serverid(::int64_t value) {
  ;
  _impl_.serverid_ = value;
}

// string serverenCode = 5;
inline void Header::clear_serverencode() {
  _impl_.serverencode_.ClearToEmpty();
}
inline const std::string& Header::serverencode() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.serverenCode)
  return _internal_serverencode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_serverencode(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.serverencode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.serverenCode)
}
inline std::string* Header::mutable_serverencode() {
  std::string* _s = _internal_mutable_serverencode();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Header.serverenCode)
  return _s;
}
inline const std::string& Header::_internal_serverencode() const {
  return _impl_.serverencode_.Get();
}
inline void Header::_internal_set_serverencode(const std::string& value) {
  ;


  _impl_.serverencode_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_serverencode() {
  ;
  return _impl_.serverencode_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_serverencode() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Header.serverenCode)
  return _impl_.serverencode_.Release();
}
inline void Header::set_allocated_serverencode(std::string* value) {
  _impl_.serverencode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.serverencode_.IsDefault()) {
          _impl_.serverencode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Header.serverenCode)
}

// int64 executeTime = 6;
inline void Header::clear_executetime() {
  _impl_.executetime_ = ::int64_t{0};
}
inline ::int64_t Header::executetime() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.executeTime)
  return _internal_executetime();
}
inline void Header::set_executetime(::int64_t value) {
  _internal_set_executetime(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.executeTime)
}
inline ::int64_t Header::_internal_executetime() const {
  return _impl_.executetime_;
}
inline void Header::_internal_set_executetime(::int64_t value) {
  ;
  _impl_.executetime_ = value;
}

// .com.alibaba.otter.canal.protocol.Type sourceType = 7;
inline bool Header::has_sourcetype() const {
  return sourceType_present_case() == kSourceType;
}
inline void Header::set_has_sourcetype() {
  _impl_._oneof_case_[1] = kSourceType;
}
inline void Header::clear_sourcetype() {
  if (sourceType_present_case() == kSourceType) {
    _impl_.sourceType_present_.sourcetype_ = 0;
    clear_has_sourceType_present();
  }
}
inline ::com::alibaba::otter::canal::protocol::Type Header::sourcetype() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.sourceType)
  return _internal_sourcetype();
}
inline void Header::set_sourcetype(::com::alibaba::otter::canal::protocol::Type value) {
   _internal_set_sourcetype(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.sourceType)
}
inline ::com::alibaba::otter::canal::protocol::Type Header::_internal_sourcetype() const {
  if (sourceType_present_case() == kSourceType) {
    return static_cast<::com::alibaba::otter::canal::protocol::Type>(_impl_.sourceType_present_.sourcetype_);
  }
  return static_cast<::com::alibaba::otter::canal::protocol::Type>(0);
}
inline void Header::_internal_set_sourcetype(::com::alibaba::otter::canal::protocol::Type value) {
  if (sourceType_present_case() != kSourceType) {
    clear_sourceType_present();
    set_has_sourcetype();
  }
  _impl_.sourceType_present_.sourcetype_ = value;
}

// string schemaName = 8;
inline void Header::clear_schemaname() {
  _impl_.schemaname_.ClearToEmpty();
}
inline const std::string& Header::schemaname() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.schemaName)
  return _internal_schemaname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_schemaname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.schemaname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.schemaName)
}
inline std::string* Header::mutable_schemaname() {
  std::string* _s = _internal_mutable_schemaname();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Header.schemaName)
  return _s;
}
inline const std::string& Header::_internal_schemaname() const {
  return _impl_.schemaname_.Get();
}
inline void Header::_internal_set_schemaname(const std::string& value) {
  ;


  _impl_.schemaname_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_schemaname() {
  ;
  return _impl_.schemaname_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_schemaname() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Header.schemaName)
  return _impl_.schemaname_.Release();
}
inline void Header::set_allocated_schemaname(std::string* value) {
  _impl_.schemaname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schemaname_.IsDefault()) {
          _impl_.schemaname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Header.schemaName)
}

// string tableName = 9;
inline void Header::clear_tablename() {
  _impl_.tablename_.ClearToEmpty();
}
inline const std::string& Header::tablename() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.tableName)
  return _internal_tablename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_tablename(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tablename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.tableName)
}
inline std::string* Header::mutable_tablename() {
  std::string* _s = _internal_mutable_tablename();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Header.tableName)
  return _s;
}
inline const std::string& Header::_internal_tablename() const {
  return _impl_.tablename_.Get();
}
inline void Header::_internal_set_tablename(const std::string& value) {
  ;


  _impl_.tablename_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_tablename() {
  ;
  return _impl_.tablename_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_tablename() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Header.tableName)
  return _impl_.tablename_.Release();
}
inline void Header::set_allocated_tablename(std::string* value) {
  _impl_.tablename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tablename_.IsDefault()) {
          _impl_.tablename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Header.tableName)
}

// int64 eventLength = 10;
inline void Header::clear_eventlength() {
  _impl_.eventlength_ = ::int64_t{0};
}
inline ::int64_t Header::eventlength() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.eventLength)
  return _internal_eventlength();
}
inline void Header::set_eventlength(::int64_t value) {
  _internal_set_eventlength(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.eventLength)
}
inline ::int64_t Header::_internal_eventlength() const {
  return _impl_.eventlength_;
}
inline void Header::_internal_set_eventlength(::int64_t value) {
  ;
  _impl_.eventlength_ = value;
}

// .com.alibaba.otter.canal.protocol.EventType eventType = 11;
inline bool Header::has_eventtype() const {
  return eventType_present_case() == kEventType;
}
inline void Header::set_has_eventtype() {
  _impl_._oneof_case_[2] = kEventType;
}
inline void Header::clear_eventtype() {
  if (eventType_present_case() == kEventType) {
    _impl_.eventType_present_.eventtype_ = 0;
    clear_has_eventType_present();
  }
}
inline ::com::alibaba::otter::canal::protocol::EventType Header::eventtype() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.eventType)
  return _internal_eventtype();
}
inline void Header::set_eventtype(::com::alibaba::otter::canal::protocol::EventType value) {
   _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.eventType)
}
inline ::com::alibaba::otter::canal::protocol::EventType Header::_internal_eventtype() const {
  if (eventType_present_case() == kEventType) {
    return static_cast<::com::alibaba::otter::canal::protocol::EventType>(_impl_.eventType_present_.eventtype_);
  }
  return static_cast<::com::alibaba::otter::canal::protocol::EventType>(0);
}
inline void Header::_internal_set_eventtype(::com::alibaba::otter::canal::protocol::EventType value) {
  if (eventType_present_case() != kEventType) {
    clear_eventType_present();
    set_has_eventtype();
  }
  _impl_.eventType_present_.eventtype_ = value;
}

// repeated .com.alibaba.otter.canal.protocol.Pair props = 12;
inline int Header::_internal_props_size() const {
  return _impl_.props_.size();
}
inline int Header::props_size() const {
  return _internal_props_size();
}
inline void Header::clear_props() {
  _internal_mutable_props()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::Pair* Header::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Header.props)
  return _internal_mutable_props()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
Header::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.Header.props)
  return _internal_mutable_props();
}
inline const ::com::alibaba::otter::canal::protocol::Pair& Header::_internal_props(int index) const {
  return _internal_props().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::Pair& Header::props(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.props)
  return _internal_props(index);
}
inline ::com::alibaba::otter::canal::protocol::Pair* Header::_internal_add_props() {
  return _internal_mutable_props()->Add();
}
inline ::com::alibaba::otter::canal::protocol::Pair* Header::add_props() {
  ::com::alibaba::otter::canal::protocol::Pair* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.Header.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
Header::props() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.Header.props)
  return _internal_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>&
Header::_internal_props() const {
  return _impl_.props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>*
Header::_internal_mutable_props() {
  return &_impl_.props_;
}

// string gtid = 13;
inline void Header::clear_gtid() {
  _impl_.gtid_.ClearToEmpty();
}
inline const std::string& Header::gtid() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Header.gtid)
  return _internal_gtid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_gtid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.gtid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Header.gtid)
}
inline std::string* Header::mutable_gtid() {
  std::string* _s = _internal_mutable_gtid();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Header.gtid)
  return _s;
}
inline const std::string& Header::_internal_gtid() const {
  return _impl_.gtid_.Get();
}
inline void Header::_internal_set_gtid(const std::string& value) {
  ;


  _impl_.gtid_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_gtid() {
  ;
  return _impl_.gtid_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_gtid() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Header.gtid)
  return _impl_.gtid_.Release();
}
inline void Header::set_allocated_gtid(std::string* value) {
  _impl_.gtid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gtid_.IsDefault()) {
          _impl_.gtid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Header.gtid)
}

inline bool Header::has_version_present() const {
  return version_present_case() != VERSION_PRESENT_NOT_SET;
}
inline void Header::clear_has_version_present() {
  _impl_._oneof_case_[0] = VERSION_PRESENT_NOT_SET;
}
inline bool Header::has_sourceType_present() const {
  return sourceType_present_case() != SOURCETYPE_PRESENT_NOT_SET;
}
inline void Header::clear_has_sourceType_present() {
  _impl_._oneof_case_[1] = SOURCETYPE_PRESENT_NOT_SET;
}
inline bool Header::has_eventType_present() const {
  return eventType_present_case() != EVENTTYPE_PRESENT_NOT_SET;
}
inline void Header::clear_has_eventType_present() {
  _impl_._oneof_case_[2] = EVENTTYPE_PRESENT_NOT_SET;
}
inline Header::VersionPresentCase Header::version_present_case() const {
  return Header::VersionPresentCase(_impl_._oneof_case_[0]);
}
inline Header::SourceTypePresentCase Header::sourceType_present_case() const {
  return Header::SourceTypePresentCase(_impl_._oneof_case_[1]);
}
inline Header::EventTypePresentCase Header::eventType_present_case() const {
  return Header::EventTypePresentCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// Column

// int32 index = 1;
inline void Column::clear_index() {
  _impl_.index_ = 0;
}
inline ::int32_t Column::index() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.index)
  return _internal_index();
}
inline void Column::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.index)
}
inline ::int32_t Column::_internal_index() const {
  return _impl_.index_;
}
inline void Column::_internal_set_index(::int32_t value) {
  ;
  _impl_.index_ = value;
}

// int32 sqlType = 2;
inline void Column::clear_sqltype() {
  _impl_.sqltype_ = 0;
}
inline ::int32_t Column::sqltype() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.sqlType)
  return _internal_sqltype();
}
inline void Column::set_sqltype(::int32_t value) {
  _internal_set_sqltype(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.sqlType)
}
inline ::int32_t Column::_internal_sqltype() const {
  return _impl_.sqltype_;
}
inline void Column::_internal_set_sqltype(::int32_t value) {
  ;
  _impl_.sqltype_ = value;
}

// string name = 3;
inline void Column::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Column::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.name)
}
inline std::string* Column::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Column.name)
  return _s;
}
inline const std::string& Column::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Column::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Column.name)
  return _impl_.name_.Release();
}
inline void Column::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Column.name)
}

// bool isKey = 4;
inline void Column::clear_iskey() {
  _impl_.iskey_ = false;
}
inline bool Column::iskey() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.isKey)
  return _internal_iskey();
}
inline void Column::set_iskey(bool value) {
  _internal_set_iskey(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.isKey)
}
inline bool Column::_internal_iskey() const {
  return _impl_.iskey_;
}
inline void Column::_internal_set_iskey(bool value) {
  ;
  _impl_.iskey_ = value;
}

// bool updated = 5;
inline void Column::clear_updated() {
  _impl_.updated_ = false;
}
inline bool Column::updated() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.updated)
  return _internal_updated();
}
inline void Column::set_updated(bool value) {
  _internal_set_updated(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.updated)
}
inline bool Column::_internal_updated() const {
  return _impl_.updated_;
}
inline void Column::_internal_set_updated(bool value) {
  ;
  _impl_.updated_ = value;
}

// bool isNull = 6;
inline bool Column::has_isnull() const {
  return isNull_present_case() == kIsNull;
}
inline void Column::set_has_isnull() {
  _impl_._oneof_case_[0] = kIsNull;
}
inline void Column::clear_isnull() {
  if (isNull_present_case() == kIsNull) {
    _impl_.isNull_present_.isnull_ = false;
    clear_has_isNull_present();
  }
}
inline bool Column::isnull() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.isNull)
  return _internal_isnull();
}
inline void Column::set_isnull(bool value) {
  _internal_set_isnull(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.isNull)
}
inline bool Column::_internal_isnull() const {
  if (isNull_present_case() == kIsNull) {
    return _impl_.isNull_present_.isnull_;
  }
  return false;
}
inline void Column::_internal_set_isnull(bool value) {
  if (isNull_present_case() != kIsNull) {
    clear_isNull_present();
    set_has_isnull();
  }
  _impl_.isNull_present_.isnull_ = value;
}

// repeated .com.alibaba.otter.canal.protocol.Pair props = 7;
inline int Column::_internal_props_size() const {
  return _impl_.props_.size();
}
inline int Column::props_size() const {
  return _internal_props_size();
}
inline void Column::clear_props() {
  _internal_mutable_props()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::Pair* Column::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Column.props)
  return _internal_mutable_props()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
Column::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.Column.props)
  return _internal_mutable_props();
}
inline const ::com::alibaba::otter::canal::protocol::Pair& Column::_internal_props(int index) const {
  return _internal_props().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::Pair& Column::props(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.props)
  return _internal_props(index);
}
inline ::com::alibaba::otter::canal::protocol::Pair* Column::_internal_add_props() {
  return _internal_mutable_props()->Add();
}
inline ::com::alibaba::otter::canal::protocol::Pair* Column::add_props() {
  ::com::alibaba::otter::canal::protocol::Pair* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.Column.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
Column::props() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.Column.props)
  return _internal_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>&
Column::_internal_props() const {
  return _impl_.props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>*
Column::_internal_mutable_props() {
  return &_impl_.props_;
}

// string value = 8;
inline void Column::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Column::value() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Column::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.value)
}
inline std::string* Column::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Column.value)
  return _s;
}
inline const std::string& Column::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Column::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* Column::release_value() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Column.value)
  return _impl_.value_.Release();
}
inline void Column::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Column.value)
}

// int32 length = 9;
inline void Column::clear_length() {
  _impl_.length_ = 0;
}
inline ::int32_t Column::length() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.length)
  return _internal_length();
}
inline void Column::set_length(::int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.length)
}
inline ::int32_t Column::_internal_length() const {
  return _impl_.length_;
}
inline void Column::_internal_set_length(::int32_t value) {
  ;
  _impl_.length_ = value;
}

// string mysqlType = 10;
inline void Column::clear_mysqltype() {
  _impl_.mysqltype_.ClearToEmpty();
}
inline const std::string& Column::mysqltype() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Column.mysqlType)
  return _internal_mysqltype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Column::set_mysqltype(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.mysqltype_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Column.mysqlType)
}
inline std::string* Column::mutable_mysqltype() {
  std::string* _s = _internal_mutable_mysqltype();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Column.mysqlType)
  return _s;
}
inline const std::string& Column::_internal_mysqltype() const {
  return _impl_.mysqltype_.Get();
}
inline void Column::_internal_set_mysqltype(const std::string& value) {
  ;


  _impl_.mysqltype_.Set(value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_mysqltype() {
  ;
  return _impl_.mysqltype_.Mutable( GetArenaForAllocation());
}
inline std::string* Column::release_mysqltype() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Column.mysqlType)
  return _impl_.mysqltype_.Release();
}
inline void Column::set_allocated_mysqltype(std::string* value) {
  _impl_.mysqltype_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mysqltype_.IsDefault()) {
          _impl_.mysqltype_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Column.mysqlType)
}

inline bool Column::has_isNull_present() const {
  return isNull_present_case() != ISNULL_PRESENT_NOT_SET;
}
inline void Column::clear_has_isNull_present() {
  _impl_._oneof_case_[0] = ISNULL_PRESENT_NOT_SET;
}
inline Column::IsNullPresentCase Column::isNull_present_case() const {
  return Column::IsNullPresentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RowData

// repeated .com.alibaba.otter.canal.protocol.Column beforeColumns = 1;
inline int RowData::_internal_beforecolumns_size() const {
  return _impl_.beforecolumns_.size();
}
inline int RowData::beforecolumns_size() const {
  return _internal_beforecolumns_size();
}
inline void RowData::clear_beforecolumns() {
  _internal_mutable_beforecolumns()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::Column* RowData::mutable_beforecolumns(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.RowData.beforeColumns)
  return _internal_mutable_beforecolumns()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column >*
RowData::mutable_beforecolumns() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.RowData.beforeColumns)
  return _internal_mutable_beforecolumns();
}
inline const ::com::alibaba::otter::canal::protocol::Column& RowData::_internal_beforecolumns(int index) const {
  return _internal_beforecolumns().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::Column& RowData::beforecolumns(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowData.beforeColumns)
  return _internal_beforecolumns(index);
}
inline ::com::alibaba::otter::canal::protocol::Column* RowData::_internal_add_beforecolumns() {
  return _internal_mutable_beforecolumns()->Add();
}
inline ::com::alibaba::otter::canal::protocol::Column* RowData::add_beforecolumns() {
  ::com::alibaba::otter::canal::protocol::Column* _add = _internal_add_beforecolumns();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.RowData.beforeColumns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column >&
RowData::beforecolumns() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.RowData.beforeColumns)
  return _internal_beforecolumns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Column>&
RowData::_internal_beforecolumns() const {
  return _impl_.beforecolumns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Column>*
RowData::_internal_mutable_beforecolumns() {
  return &_impl_.beforecolumns_;
}

// repeated .com.alibaba.otter.canal.protocol.Column afterColumns = 2;
inline int RowData::_internal_aftercolumns_size() const {
  return _impl_.aftercolumns_.size();
}
inline int RowData::aftercolumns_size() const {
  return _internal_aftercolumns_size();
}
inline void RowData::clear_aftercolumns() {
  _internal_mutable_aftercolumns()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::Column* RowData::mutable_aftercolumns(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.RowData.afterColumns)
  return _internal_mutable_aftercolumns()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column >*
RowData::mutable_aftercolumns() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.RowData.afterColumns)
  return _internal_mutable_aftercolumns();
}
inline const ::com::alibaba::otter::canal::protocol::Column& RowData::_internal_aftercolumns(int index) const {
  return _internal_aftercolumns().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::Column& RowData::aftercolumns(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowData.afterColumns)
  return _internal_aftercolumns(index);
}
inline ::com::alibaba::otter::canal::protocol::Column* RowData::_internal_add_aftercolumns() {
  return _internal_mutable_aftercolumns()->Add();
}
inline ::com::alibaba::otter::canal::protocol::Column* RowData::add_aftercolumns() {
  ::com::alibaba::otter::canal::protocol::Column* _add = _internal_add_aftercolumns();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.RowData.afterColumns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Column >&
RowData::aftercolumns() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.RowData.afterColumns)
  return _internal_aftercolumns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Column>&
RowData::_internal_aftercolumns() const {
  return _impl_.aftercolumns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Column>*
RowData::_internal_mutable_aftercolumns() {
  return &_impl_.aftercolumns_;
}

// repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
inline int RowData::_internal_props_size() const {
  return _impl_.props_.size();
}
inline int RowData::props_size() const {
  return _internal_props_size();
}
inline void RowData::clear_props() {
  _internal_mutable_props()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::Pair* RowData::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.RowData.props)
  return _internal_mutable_props()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
RowData::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.RowData.props)
  return _internal_mutable_props();
}
inline const ::com::alibaba::otter::canal::protocol::Pair& RowData::_internal_props(int index) const {
  return _internal_props().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::Pair& RowData::props(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowData.props)
  return _internal_props(index);
}
inline ::com::alibaba::otter::canal::protocol::Pair* RowData::_internal_add_props() {
  return _internal_mutable_props()->Add();
}
inline ::com::alibaba::otter::canal::protocol::Pair* RowData::add_props() {
  ::com::alibaba::otter::canal::protocol::Pair* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.RowData.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
RowData::props() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.RowData.props)
  return _internal_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>&
RowData::_internal_props() const {
  return _impl_.props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>*
RowData::_internal_mutable_props() {
  return &_impl_.props_;
}

// -------------------------------------------------------------------

// RowChange

// int64 tableId = 1;
inline void RowChange::clear_tableid() {
  _impl_.tableid_ = ::int64_t{0};
}
inline ::int64_t RowChange::tableid() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowChange.tableId)
  return _internal_tableid();
}
inline void RowChange::set_tableid(::int64_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.RowChange.tableId)
}
inline ::int64_t RowChange::_internal_tableid() const {
  return _impl_.tableid_;
}
inline void RowChange::_internal_set_tableid(::int64_t value) {
  ;
  _impl_.tableid_ = value;
}

// .com.alibaba.otter.canal.protocol.EventType eventType = 2;
inline bool RowChange::has_eventtype() const {
  return eventType_present_case() == kEventType;
}
inline void RowChange::set_has_eventtype() {
  _impl_._oneof_case_[0] = kEventType;
}
inline void RowChange::clear_eventtype() {
  if (eventType_present_case() == kEventType) {
    _impl_.eventType_present_.eventtype_ = 0;
    clear_has_eventType_present();
  }
}
inline ::com::alibaba::otter::canal::protocol::EventType RowChange::eventtype() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowChange.eventType)
  return _internal_eventtype();
}
inline void RowChange::set_eventtype(::com::alibaba::otter::canal::protocol::EventType value) {
   _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.RowChange.eventType)
}
inline ::com::alibaba::otter::canal::protocol::EventType RowChange::_internal_eventtype() const {
  if (eventType_present_case() == kEventType) {
    return static_cast<::com::alibaba::otter::canal::protocol::EventType>(_impl_.eventType_present_.eventtype_);
  }
  return static_cast<::com::alibaba::otter::canal::protocol::EventType>(0);
}
inline void RowChange::_internal_set_eventtype(::com::alibaba::otter::canal::protocol::EventType value) {
  if (eventType_present_case() != kEventType) {
    clear_eventType_present();
    set_has_eventtype();
  }
  _impl_.eventType_present_.eventtype_ = value;
}

// bool isDdl = 10;
inline bool RowChange::has_isddl() const {
  return isDdl_present_case() == kIsDdl;
}
inline void RowChange::set_has_isddl() {
  _impl_._oneof_case_[1] = kIsDdl;
}
inline void RowChange::clear_isddl() {
  if (isDdl_present_case() == kIsDdl) {
    _impl_.isDdl_present_.isddl_ = false;
    clear_has_isDdl_present();
  }
}
inline bool RowChange::isddl() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowChange.isDdl)
  return _internal_isddl();
}
inline void RowChange::set_isddl(bool value) {
  _internal_set_isddl(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.RowChange.isDdl)
}
inline bool RowChange::_internal_isddl() const {
  if (isDdl_present_case() == kIsDdl) {
    return _impl_.isDdl_present_.isddl_;
  }
  return false;
}
inline void RowChange::_internal_set_isddl(bool value) {
  if (isDdl_present_case() != kIsDdl) {
    clear_isDdl_present();
    set_has_isddl();
  }
  _impl_.isDdl_present_.isddl_ = value;
}

// string sql = 11;
inline void RowChange::clear_sql() {
  _impl_.sql_.ClearToEmpty();
}
inline const std::string& RowChange::sql() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowChange.sql)
  return _internal_sql();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RowChange::set_sql(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sql_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.RowChange.sql)
}
inline std::string* RowChange::mutable_sql() {
  std::string* _s = _internal_mutable_sql();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.RowChange.sql)
  return _s;
}
inline const std::string& RowChange::_internal_sql() const {
  return _impl_.sql_.Get();
}
inline void RowChange::_internal_set_sql(const std::string& value) {
  ;


  _impl_.sql_.Set(value, GetArenaForAllocation());
}
inline std::string* RowChange::_internal_mutable_sql() {
  ;
  return _impl_.sql_.Mutable( GetArenaForAllocation());
}
inline std::string* RowChange::release_sql() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.RowChange.sql)
  return _impl_.sql_.Release();
}
inline void RowChange::set_allocated_sql(std::string* value) {
  _impl_.sql_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sql_.IsDefault()) {
          _impl_.sql_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.RowChange.sql)
}

// repeated .com.alibaba.otter.canal.protocol.RowData rowDatas = 12;
inline int RowChange::_internal_rowdatas_size() const {
  return _impl_.rowdatas_.size();
}
inline int RowChange::rowdatas_size() const {
  return _internal_rowdatas_size();
}
inline void RowChange::clear_rowdatas() {
  _internal_mutable_rowdatas()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::RowData* RowChange::mutable_rowdatas(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.RowChange.rowDatas)
  return _internal_mutable_rowdatas()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::RowData >*
RowChange::mutable_rowdatas() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.RowChange.rowDatas)
  return _internal_mutable_rowdatas();
}
inline const ::com::alibaba::otter::canal::protocol::RowData& RowChange::_internal_rowdatas(int index) const {
  return _internal_rowdatas().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::RowData& RowChange::rowdatas(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowChange.rowDatas)
  return _internal_rowdatas(index);
}
inline ::com::alibaba::otter::canal::protocol::RowData* RowChange::_internal_add_rowdatas() {
  return _internal_mutable_rowdatas()->Add();
}
inline ::com::alibaba::otter::canal::protocol::RowData* RowChange::add_rowdatas() {
  ::com::alibaba::otter::canal::protocol::RowData* _add = _internal_add_rowdatas();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.RowChange.rowDatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::RowData >&
RowChange::rowdatas() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.RowChange.rowDatas)
  return _internal_rowdatas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::RowData>&
RowChange::_internal_rowdatas() const {
  return _impl_.rowdatas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::RowData>*
RowChange::_internal_mutable_rowdatas() {
  return &_impl_.rowdatas_;
}

// repeated .com.alibaba.otter.canal.protocol.Pair props = 13;
inline int RowChange::_internal_props_size() const {
  return _impl_.props_.size();
}
inline int RowChange::props_size() const {
  return _internal_props_size();
}
inline void RowChange::clear_props() {
  _internal_mutable_props()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::Pair* RowChange::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.RowChange.props)
  return _internal_mutable_props()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
RowChange::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.RowChange.props)
  return _internal_mutable_props();
}
inline const ::com::alibaba::otter::canal::protocol::Pair& RowChange::_internal_props(int index) const {
  return _internal_props().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::Pair& RowChange::props(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowChange.props)
  return _internal_props(index);
}
inline ::com::alibaba::otter::canal::protocol::Pair* RowChange::_internal_add_props() {
  return _internal_mutable_props()->Add();
}
inline ::com::alibaba::otter::canal::protocol::Pair* RowChange::add_props() {
  ::com::alibaba::otter::canal::protocol::Pair* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.RowChange.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
RowChange::props() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.RowChange.props)
  return _internal_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>&
RowChange::_internal_props() const {
  return _impl_.props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>*
RowChange::_internal_mutable_props() {
  return &_impl_.props_;
}

// string ddlSchemaName = 14;
inline void RowChange::clear_ddlschemaname() {
  _impl_.ddlschemaname_.ClearToEmpty();
}
inline const std::string& RowChange::ddlschemaname() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.RowChange.ddlSchemaName)
  return _internal_ddlschemaname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RowChange::set_ddlschemaname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ddlschemaname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.RowChange.ddlSchemaName)
}
inline std::string* RowChange::mutable_ddlschemaname() {
  std::string* _s = _internal_mutable_ddlschemaname();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.RowChange.ddlSchemaName)
  return _s;
}
inline const std::string& RowChange::_internal_ddlschemaname() const {
  return _impl_.ddlschemaname_.Get();
}
inline void RowChange::_internal_set_ddlschemaname(const std::string& value) {
  ;


  _impl_.ddlschemaname_.Set(value, GetArenaForAllocation());
}
inline std::string* RowChange::_internal_mutable_ddlschemaname() {
  ;
  return _impl_.ddlschemaname_.Mutable( GetArenaForAllocation());
}
inline std::string* RowChange::release_ddlschemaname() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.RowChange.ddlSchemaName)
  return _impl_.ddlschemaname_.Release();
}
inline void RowChange::set_allocated_ddlschemaname(std::string* value) {
  _impl_.ddlschemaname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ddlschemaname_.IsDefault()) {
          _impl_.ddlschemaname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.RowChange.ddlSchemaName)
}

inline bool RowChange::has_eventType_present() const {
  return eventType_present_case() != EVENTTYPE_PRESENT_NOT_SET;
}
inline void RowChange::clear_has_eventType_present() {
  _impl_._oneof_case_[0] = EVENTTYPE_PRESENT_NOT_SET;
}
inline bool RowChange::has_isDdl_present() const {
  return isDdl_present_case() != ISDDL_PRESENT_NOT_SET;
}
inline void RowChange::clear_has_isDdl_present() {
  _impl_._oneof_case_[1] = ISDDL_PRESENT_NOT_SET;
}
inline RowChange::EventTypePresentCase RowChange::eventType_present_case() const {
  return RowChange::EventTypePresentCase(_impl_._oneof_case_[0]);
}
inline RowChange::IsDdlPresentCase RowChange::isDdl_present_case() const {
  return RowChange::IsDdlPresentCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// TransactionBegin

// int64 executeTime = 1;
inline void TransactionBegin::clear_executetime() {
  _impl_.executetime_ = ::int64_t{0};
}
inline ::int64_t TransactionBegin::executetime() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.TransactionBegin.executeTime)
  return _internal_executetime();
}
inline void TransactionBegin::set_executetime(::int64_t value) {
  _internal_set_executetime(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.TransactionBegin.executeTime)
}
inline ::int64_t TransactionBegin::_internal_executetime() const {
  return _impl_.executetime_;
}
inline void TransactionBegin::_internal_set_executetime(::int64_t value) {
  ;
  _impl_.executetime_ = value;
}

// string transactionId = 2;
inline void TransactionBegin::clear_transactionid() {
  _impl_.transactionid_.ClearToEmpty();
}
inline const std::string& TransactionBegin::transactionid() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.TransactionBegin.transactionId)
  return _internal_transactionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionBegin::set_transactionid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.transactionid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.TransactionBegin.transactionId)
}
inline std::string* TransactionBegin::mutable_transactionid() {
  std::string* _s = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.TransactionBegin.transactionId)
  return _s;
}
inline const std::string& TransactionBegin::_internal_transactionid() const {
  return _impl_.transactionid_.Get();
}
inline void TransactionBegin::_internal_set_transactionid(const std::string& value) {
  ;


  _impl_.transactionid_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionBegin::_internal_mutable_transactionid() {
  ;
  return _impl_.transactionid_.Mutable( GetArenaForAllocation());
}
inline std::string* TransactionBegin::release_transactionid() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.TransactionBegin.transactionId)
  return _impl_.transactionid_.Release();
}
inline void TransactionBegin::set_allocated_transactionid(std::string* value) {
  _impl_.transactionid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transactionid_.IsDefault()) {
          _impl_.transactionid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.TransactionBegin.transactionId)
}

// repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
inline int TransactionBegin::_internal_props_size() const {
  return _impl_.props_.size();
}
inline int TransactionBegin::props_size() const {
  return _internal_props_size();
}
inline void TransactionBegin::clear_props() {
  _internal_mutable_props()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::Pair* TransactionBegin::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.TransactionBegin.props)
  return _internal_mutable_props()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
TransactionBegin::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.TransactionBegin.props)
  return _internal_mutable_props();
}
inline const ::com::alibaba::otter::canal::protocol::Pair& TransactionBegin::_internal_props(int index) const {
  return _internal_props().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::Pair& TransactionBegin::props(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.TransactionBegin.props)
  return _internal_props(index);
}
inline ::com::alibaba::otter::canal::protocol::Pair* TransactionBegin::_internal_add_props() {
  return _internal_mutable_props()->Add();
}
inline ::com::alibaba::otter::canal::protocol::Pair* TransactionBegin::add_props() {
  ::com::alibaba::otter::canal::protocol::Pair* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.TransactionBegin.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
TransactionBegin::props() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.TransactionBegin.props)
  return _internal_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>&
TransactionBegin::_internal_props() const {
  return _impl_.props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>*
TransactionBegin::_internal_mutable_props() {
  return &_impl_.props_;
}

// int64 threadId = 4;
inline void TransactionBegin::clear_threadid() {
  _impl_.threadid_ = ::int64_t{0};
}
inline ::int64_t TransactionBegin::threadid() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.TransactionBegin.threadId)
  return _internal_threadid();
}
inline void TransactionBegin::set_threadid(::int64_t value) {
  _internal_set_threadid(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.TransactionBegin.threadId)
}
inline ::int64_t TransactionBegin::_internal_threadid() const {
  return _impl_.threadid_;
}
inline void TransactionBegin::_internal_set_threadid(::int64_t value) {
  ;
  _impl_.threadid_ = value;
}

// -------------------------------------------------------------------

// TransactionEnd

// int64 executeTime = 1;
inline void TransactionEnd::clear_executetime() {
  _impl_.executetime_ = ::int64_t{0};
}
inline ::int64_t TransactionEnd::executetime() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.TransactionEnd.executeTime)
  return _internal_executetime();
}
inline void TransactionEnd::set_executetime(::int64_t value) {
  _internal_set_executetime(value);
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.TransactionEnd.executeTime)
}
inline ::int64_t TransactionEnd::_internal_executetime() const {
  return _impl_.executetime_;
}
inline void TransactionEnd::_internal_set_executetime(::int64_t value) {
  ;
  _impl_.executetime_ = value;
}

// string transactionId = 2;
inline void TransactionEnd::clear_transactionid() {
  _impl_.transactionid_.ClearToEmpty();
}
inline const std::string& TransactionEnd::transactionid() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.TransactionEnd.transactionId)
  return _internal_transactionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionEnd::set_transactionid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.transactionid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.TransactionEnd.transactionId)
}
inline std::string* TransactionEnd::mutable_transactionid() {
  std::string* _s = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.TransactionEnd.transactionId)
  return _s;
}
inline const std::string& TransactionEnd::_internal_transactionid() const {
  return _impl_.transactionid_.Get();
}
inline void TransactionEnd::_internal_set_transactionid(const std::string& value) {
  ;


  _impl_.transactionid_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionEnd::_internal_mutable_transactionid() {
  ;
  return _impl_.transactionid_.Mutable( GetArenaForAllocation());
}
inline std::string* TransactionEnd::release_transactionid() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.TransactionEnd.transactionId)
  return _impl_.transactionid_.Release();
}
inline void TransactionEnd::set_allocated_transactionid(std::string* value) {
  _impl_.transactionid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transactionid_.IsDefault()) {
          _impl_.transactionid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.TransactionEnd.transactionId)
}

// repeated .com.alibaba.otter.canal.protocol.Pair props = 3;
inline int TransactionEnd::_internal_props_size() const {
  return _impl_.props_.size();
}
inline int TransactionEnd::props_size() const {
  return _internal_props_size();
}
inline void TransactionEnd::clear_props() {
  _internal_mutable_props()->Clear();
}
inline ::com::alibaba::otter::canal::protocol::Pair* TransactionEnd::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.TransactionEnd.props)
  return _internal_mutable_props()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >*
TransactionEnd::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.alibaba.otter.canal.protocol.TransactionEnd.props)
  return _internal_mutable_props();
}
inline const ::com::alibaba::otter::canal::protocol::Pair& TransactionEnd::_internal_props(int index) const {
  return _internal_props().Get(index);
}
inline const ::com::alibaba::otter::canal::protocol::Pair& TransactionEnd::props(int index) const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.TransactionEnd.props)
  return _internal_props(index);
}
inline ::com::alibaba::otter::canal::protocol::Pair* TransactionEnd::_internal_add_props() {
  return _internal_mutable_props()->Add();
}
inline ::com::alibaba::otter::canal::protocol::Pair* TransactionEnd::add_props() {
  ::com::alibaba::otter::canal::protocol::Pair* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:com.alibaba.otter.canal.protocol.TransactionEnd.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::alibaba::otter::canal::protocol::Pair >&
TransactionEnd::props() const {
  // @@protoc_insertion_point(field_list:com.alibaba.otter.canal.protocol.TransactionEnd.props)
  return _internal_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>&
TransactionEnd::_internal_props() const {
  return _impl_.props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::com::alibaba::otter::canal::protocol::Pair>*
TransactionEnd::_internal_mutable_props() {
  return &_impl_.props_;
}

// -------------------------------------------------------------------

// Pair

// string key = 1;
inline void Pair::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Pair::key() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Pair.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Pair::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Pair.key)
}
inline std::string* Pair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Pair.key)
  return _s;
}
inline const std::string& Pair::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Pair::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Pair::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* Pair::release_key() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Pair.key)
  return _impl_.key_.Release();
}
inline void Pair::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Pair.key)
}

// string value = 2;
inline void Pair::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Pair::value() const {
  // @@protoc_insertion_point(field_get:com.alibaba.otter.canal.protocol.Pair.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Pair::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.alibaba.otter.canal.protocol.Pair.value)
}
inline std::string* Pair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:com.alibaba.otter.canal.protocol.Pair.value)
  return _s;
}
inline const std::string& Pair::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Pair::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Pair::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* Pair::release_value() {
  // @@protoc_insertion_point(field_release:com.alibaba.otter.canal.protocol.Pair.value)
  return _impl_.value_.Release();
}
inline void Pair::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.alibaba.otter.canal.protocol.Pair.value)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace canal
}  // namespace otter
}  // namespace alibaba
}  // namespace com


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::com::alibaba::otter::canal::protocol::EntryType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::com::alibaba::otter::canal::protocol::EntryType>() {
  return ::com::alibaba::otter::canal::protocol::EntryType_descriptor();
}
template <>
struct is_proto_enum<::com::alibaba::otter::canal::protocol::EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::com::alibaba::otter::canal::protocol::EventType>() {
  return ::com::alibaba::otter::canal::protocol::EventType_descriptor();
}
template <>
struct is_proto_enum<::com::alibaba::otter::canal::protocol::Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::com::alibaba::otter::canal::protocol::Type>() {
  return ::com::alibaba::otter::canal::protocol::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_EntryProtocol_2eproto_2epb_2eh

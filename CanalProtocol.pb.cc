// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CanalProtocol.proto

#include "CanalProtocol.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace com {
namespace alibaba {
namespace otter {
namespace canal {
namespace protocol {
template <typename>
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.magic_number_present_)*/{}
  , /*decltype(_impl_.version_present_)*/{}
  , /*decltype(_impl_.compression_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HeartBeat::HeartBeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.send_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.start_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartBeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatDefaultTypeInternal() {}
  union {
    HeartBeat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Handshake::Handshake(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seeds_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.supported_compressions_)*/ 0

  , /*decltype(_impl_.communication_encoding_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HandshakeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandshakeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandshakeDefaultTypeInternal() {}
  union {
    Handshake _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandshakeDefaultTypeInternal _Handshake_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClientAuth::ClientAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.filter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.start_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.net_read_timeout_present_)*/{}
  , /*decltype(_impl_.net_write_timeout_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ClientAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientAuthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientAuthDefaultTypeInternal() {}
  union {
    ClientAuth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientAuthDefaultTypeInternal _ClientAuth_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Ack::Ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_code_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckDefaultTypeInternal() {}
  union {
    Ack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckDefaultTypeInternal _Ack_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClientAck::ClientAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destination_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.batch_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientAckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientAckDefaultTypeInternal() {}
  union {
    ClientAck _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientAckDefaultTypeInternal _ClientAck_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Sub::Sub(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destination_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.filter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubDefaultTypeInternal() {}
  union {
    Sub _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubDefaultTypeInternal _Sub_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Unsub::Unsub(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destination_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.filter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsubDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsubDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsubDefaultTypeInternal() {}
  union {
    Unsub _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsubDefaultTypeInternal _Unsub_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Get::Get(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destination_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fetch_size_)*/ 0

  , /*decltype(_impl_.timeout_present_)*/{}
  , /*decltype(_impl_.unit_present_)*/{}
  , /*decltype(_impl_.auto_ack_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDefaultTypeInternal() {}
  union {
    Get _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDefaultTypeInternal _Get_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Messages::Messages(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.batch_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessagesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessagesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessagesDefaultTypeInternal() {}
  union {
    Messages _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessagesDefaultTypeInternal _Messages_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Dump::Dump(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.journal_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.position_)*/ ::int64_t{0}

  , /*decltype(_impl_.timestamp_present_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DumpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DumpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DumpDefaultTypeInternal() {}
  union {
    Dump _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DumpDefaultTypeInternal _Dump_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClientRollback::ClientRollback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destination_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.batch_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientRollbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientRollbackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientRollbackDefaultTypeInternal() {}
  union {
    ClientRollback _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientRollbackDefaultTypeInternal _ClientRollback_default_instance_;
}  // namespace protocol
}  // namespace canal
}  // namespace otter
}  // namespace alibaba
}  // namespace com
static ::_pb::Metadata file_level_metadata_CanalProtocol_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_CanalProtocol_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_CanalProtocol_2eproto = nullptr;
const ::uint32_t TableStruct_CanalProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Packet, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Packet, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Packet, _impl_.type_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Packet, _impl_.body_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Packet, _impl_.magic_number_present_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Packet, _impl_.version_present_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Packet, _impl_.compression_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::HeartBeat, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::HeartBeat, _impl_.send_timestamp_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::HeartBeat, _impl_.start_timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Handshake, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Handshake, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Handshake, _impl_.seeds_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Handshake, _impl_.supported_compressions_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Handshake, _impl_.communication_encoding_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_.username_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_.password_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_.filter_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_.start_timestamp_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_.net_read_timeout_present_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_.net_write_timeout_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Ack, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Ack, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Ack, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Ack, _impl_.error_code_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAck, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAck, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAck, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAck, _impl_.batch_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Sub, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Sub, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Sub, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Sub, _impl_.filter_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Unsub, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Unsub, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Unsub, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Unsub, _impl_.filter_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _impl_.fetch_size_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _impl_.timeout_present_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _impl_.unit_present_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _impl_.auto_ack_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Messages, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Messages, _impl_.batch_id_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Messages, _impl_.messages_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Dump, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Dump, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Dump, _impl_.journal_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Dump, _impl_.position_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Dump, _impl_.timestamp_present_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientRollback, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientRollback, _impl_.destination_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientRollback, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientRollback, _impl_.batch_id_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Packet)},
        { 16, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::HeartBeat)},
        { 26, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Handshake)},
        { 38, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::ClientAuth)},
        { 56, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Ack)},
        { 67, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::ClientAck)},
        { 78, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Sub)},
        { 89, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Unsub)},
        { 100, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Get)},
        { 117, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Messages)},
        { 127, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::Dump)},
        { 139, -1, -1, sizeof(::com::alibaba::otter::canal::protocol::ClientRollback)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::com::alibaba::otter::canal::protocol::_Packet_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_HeartBeat_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Handshake_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_ClientAuth_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Ack_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_ClientAck_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Sub_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Unsub_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Get_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Messages_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_Dump_default_instance_._instance,
    &::com::alibaba::otter::canal::protocol::_ClientRollback_default_instance_._instance,
};
const char descriptor_table_protodef_CanalProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023CanalProtocol.proto\022 com.alibaba.otter"
    ".canal.protocol\"\205\002\n\006Packet\022\026\n\014magic_numb"
    "er\030\001 \001(\005H\000\022\021\n\007version\030\002 \001(\005H\001\022:\n\004type\030\003 "
    "\001(\0162,.com.alibaba.otter.canal.protocol.P"
    "acketType\022D\n\013compression\030\004 \001(\0162-.com.ali"
    "baba.otter.canal.protocol.CompressionH\002\022"
    "\014\n\004body\030\005 \001(\014B\026\n\024magic_number_presentB\021\n"
    "\017version_presentB\025\n\023compression_present\""
    "<\n\tHeartBeat\022\026\n\016send_timestamp\030\001 \001(\003\022\027\n\017"
    "start_timestamp\030\002 \001(\003\"\255\001\n\tHandshake\022 \n\026c"
    "ommunication_encoding\030\001 \001(\tH\000\022\r\n\005seeds\030\002"
    " \001(\014\022M\n\026supported_compressions\030\003 \001(\0162-.c"
    "om.alibaba.otter.canal.protocol.Compress"
    "ionB \n\036communication_encoding_present\"\363\001"
    "\n\nClientAuth\022\020\n\010username\030\001 \001(\t\022\020\n\010passwo"
    "rd\030\002 \001(\014\022\032\n\020net_read_timeout\030\003 \001(\005H\000\022\033\n\021"
    "net_write_timeout\030\004 \001(\005H\001\022\023\n\013destination"
    "\030\005 \001(\t\022\021\n\tclient_id\030\006 \001(\t\022\016\n\006filter\030\007 \001("
    "\t\022\027\n\017start_timestamp\030\010 \001(\003B\032\n\030net_read_t"
    "imeout_presentB\033\n\031net_write_timeout_pres"
    "ent\"H\n\003Ack\022\024\n\nerror_code\030\001 \001(\005H\000\022\025\n\rerro"
    "r_message\030\002 \001(\tB\024\n\022error_code_present\"E\n"
    "\tClientAck\022\023\n\013destination\030\001 \001(\t\022\021\n\tclien"
    "t_id\030\002 \001(\t\022\020\n\010batch_id\030\003 \001(\003\"=\n\003Sub\022\023\n\013d"
    "estination\030\001 \001(\t\022\021\n\tclient_id\030\002 \001(\t\022\016\n\006f"
    "ilter\030\007 \001(\t\"\?\n\005Unsub\022\023\n\013destination\030\001 \001("
    "\t\022\021\n\tclient_id\030\002 \001(\t\022\016\n\006filter\030\007 \001(\t\"\257\001\n"
    "\003Get\022\023\n\013destination\030\001 \001(\t\022\021\n\tclient_id\030\002"
    " \001(\t\022\022\n\nfetch_size\030\003 \001(\005\022\021\n\007timeout\030\004 \001("
    "\003H\000\022\016\n\004unit\030\005 \001(\005H\001\022\022\n\010auto_ack\030\006 \001(\010H\002B"
    "\021\n\017timeout_presentB\016\n\014unit_presentB\022\n\020au"
    "to_ack_present\".\n\010Messages\022\020\n\010batch_id\030\001"
    " \001(\003\022\020\n\010messages\030\002 \003(\014\"S\n\004Dump\022\017\n\007journa"
    "l\030\001 \001(\t\022\020\n\010position\030\002 \001(\003\022\023\n\ttimestamp\030\003"
    " \001(\003H\000B\023\n\021timestamp_present\"J\n\016ClientRol"
    "lback\022\023\n\013destination\030\001 \001(\t\022\021\n\tclient_id\030"
    "\002 \001(\t\022\020\n\010batch_id\030\003 \001(\003*U\n\013Compression\022\037"
    "\n\033COMPRESSIONCOMPATIBLEPROTO2\020\000\022\010\n\004NONE\020"
    "\001\022\010\n\004ZLIB\020\002\022\010\n\004GZIP\020\003\022\007\n\003LZF\020\004*\346\001\n\nPacke"
    "tType\022\037\n\033PACKAGETYPECOMPATIBLEPROTO2\020\000\022\r"
    "\n\tHANDSHAKE\020\001\022\030\n\024CLIENTAUTHENTICATION\020\002\022"
    "\007\n\003ACK\020\003\022\020\n\014SUBSCRIPTION\020\004\022\022\n\016UNSUBSCRIP"
    "TION\020\005\022\007\n\003GET\020\006\022\014\n\010MESSAGES\020\007\022\r\n\tCLIENTA"
    "CK\020\010\022\014\n\010SHUTDOWN\020\t\022\010\n\004DUMP\020\n\022\r\n\tHEARTBEA"
    "T\020\013\022\022\n\016CLIENTROLLBACK\020\014B1\n com.alibaba.o"
    "tter.canal.protocolB\013CanalPacketH\001b\006prot"
    "o3"
};
static ::absl::once_flag descriptor_table_CanalProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CanalProtocol_2eproto = {
    false,
    false,
    1842,
    descriptor_table_protodef_CanalProtocol_2eproto,
    "CanalProtocol.proto",
    &descriptor_table_CanalProtocol_2eproto_once,
    nullptr,
    0,
    12,
    schemas,
    file_default_instances,
    TableStruct_CanalProtocol_2eproto::offsets,
    file_level_metadata_CanalProtocol_2eproto,
    file_level_enum_descriptors_CanalProtocol_2eproto,
    file_level_service_descriptors_CanalProtocol_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CanalProtocol_2eproto_getter() {
  return &descriptor_table_CanalProtocol_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CanalProtocol_2eproto(&descriptor_table_CanalProtocol_2eproto);
namespace com {
namespace alibaba {
namespace otter {
namespace canal {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compression_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CanalProtocol_2eproto);
  return file_level_enum_descriptors_CanalProtocol_2eproto[0];
}
bool Compression_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CanalProtocol_2eproto);
  return file_level_enum_descriptors_CanalProtocol_2eproto[1];
}
bool PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Packet::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Packet, _impl_._oneof_case_);
};

Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.magic_number_present_){}
    , decltype(_impl_.version_present_){}
    , decltype(_impl_.compression_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_magic_number_present();
  switch (from.magic_number_present_case()) {
    case kMagicNumber: {
      _this->_internal_set_magic_number(from._internal_magic_number());
      break;
    }
    case MAGIC_NUMBER_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_version_present();
  switch (from.version_present_case()) {
    case kVersion: {
      _this->_internal_set_version(from._internal_version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_compression_present();
  switch (from.compression_present_case()) {
    case kCompression: {
      _this->_internal_set_compression(from._internal_compression());
      break;
    }
    case COMPRESSION_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Packet)
}

inline void Packet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.body_) {}

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.magic_number_present_){}
    , decltype(_impl_.version_present_){}
    , decltype(_impl_.compression_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_magic_number_present();
  clear_has_version_present();
  clear_has_compression_present();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
  if (has_magic_number_present()) {
    clear_magic_number_present();
  }
  if (has_version_present()) {
    clear_version_present();
  }
  if (has_compression_present()) {
    clear_compression_present();
  }
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::clear_magic_number_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Packet)
  switch (magic_number_present_case()) {
    case kMagicNumber: {
      // No need to clear
      break;
    }
    case MAGIC_NUMBER_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MAGIC_NUMBER_PRESENT_NOT_SET;
}

void Packet::clear_version_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Packet)
  switch (version_present_case()) {
    case kVersion: {
      // No need to clear
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = VERSION_PRESENT_NOT_SET;
}

void Packet::clear_compression_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Packet)
  switch (compression_present_case()) {
    case kCompression: {
      // No need to clear
      break;
    }
    case COMPRESSION_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = COMPRESSION_PRESENT_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Packet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  _impl_.type_ = 0;
  clear_magic_number_present();
  clear_version_present();
  clear_compression_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 magic_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_magic_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .com.alibaba.otter.canal.protocol.PacketType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::com::alibaba::otter::canal::protocol::PacketType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .com.alibaba.otter.canal.protocol.Compression compression = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_compression(static_cast<::com::alibaba::otter::canal::protocol::Compression>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Packet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Packet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 magic_number = 1;
  if (magic_number_present_case() == kMagicNumber) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_magic_number(), target);
  }

  // int32 version = 2;
  if (version_present_case() == kVersion) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_version(), target);
  }

  // .com.alibaba.otter.canal.protocol.PacketType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // .com.alibaba.otter.canal.protocol.Compression compression = 4;
  if (compression_present_case() == kCompression) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_compression(), target);
  }

  // bytes body = 5;
  if (!this->_internal_body().empty()) {
    const std::string& _s = this->_internal_body();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Packet)
  return target;
}

::size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Packet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body = 5;
  if (!this->_internal_body().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_body());
  }

  // .com.alibaba.otter.canal.protocol.PacketType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (magic_number_present_case()) {
    // int32 magic_number = 1;
    case kMagicNumber: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_magic_number());
      break;
    }
    case MAGIC_NUMBER_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (version_present_case()) {
    // int32 version = 2;
    case kVersion: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (compression_present_case()) {
    // .com.alibaba.otter.canal.protocol.Compression compression = 4;
    case kCompression: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_compression());
      break;
    }
    case COMPRESSION_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Packet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.magic_number_present_case()) {
    case kMagicNumber: {
      _this->_internal_set_magic_number(from._internal_magic_number());
      break;
    }
    case MAGIC_NUMBER_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.version_present_case()) {
    case kVersion: {
      _this->_internal_set_version(from._internal_version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.compression_present_case()) {
    case kCompression: {
      _this->_internal_set_compression(from._internal_compression());
      break;
    }
    case COMPRESSION_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, lhs_arena,
                                       &other->_impl_.body_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.magic_number_present_, other->_impl_.magic_number_present_);
  swap(_impl_.version_present_, other->_impl_.version_present_);
  swap(_impl_.compression_present_, other->_impl_.compression_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[0]);
}
// ===================================================================

class HeartBeat::_Internal {
 public:
};

HeartBeat::HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.HeartBeat)
}

inline void HeartBeat::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.send_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.start_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.HeartBeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeat::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.HeartBeat)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.send_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.start_timestamp_) -
      reinterpret_cast<char*>(&_impl_.send_timestamp_)) + sizeof(_impl_.start_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 send_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.send_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 start_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeartBeat::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.HeartBeat)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 send_timestamp = 1;
  if (this->_internal_send_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_send_timestamp(), target);
  }

  // int64 start_timestamp = 2;
  if (this->_internal_start_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_start_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.HeartBeat)
  return target;
}

::size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.HeartBeat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 send_timestamp = 1;
  if (this->_internal_send_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_send_timestamp());
  }

  // int64 start_timestamp = 2;
  if (this->_internal_start_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeat::GetClassData() const { return &_class_data_; }


void HeartBeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeat*>(&to_msg);
  auto& from = static_cast<const HeartBeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.HeartBeat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_send_timestamp() != 0) {
    _this->_internal_set_send_timestamp(from._internal_send_timestamp());
  }
  if (from._internal_start_timestamp() != 0) {
    _this->_internal_set_start_timestamp(from._internal_start_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  return true;
}

void HeartBeat::InternalSwap(HeartBeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.start_timestamp_)
      + sizeof(HeartBeat::_impl_.start_timestamp_)
      - PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.send_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.send_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.send_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[1]);
}
// ===================================================================

class Handshake::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Handshake, _impl_._oneof_case_);
};

Handshake::Handshake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Handshake)
}
Handshake::Handshake(const Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Handshake* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seeds_) {}

    , decltype(_impl_.supported_compressions_) {}

    , decltype(_impl_.communication_encoding_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.seeds_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.seeds_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seeds().empty()) {
    _this->_impl_.seeds_.Set(from._internal_seeds(), _this->GetArenaForAllocation());
  }
  _this->_impl_.supported_compressions_ = from._impl_.supported_compressions_;
  clear_has_communication_encoding_present();
  switch (from.communication_encoding_present_case()) {
    case kCommunicationEncoding: {
      _this->_internal_set_communication_encoding(from._internal_communication_encoding());
      break;
    }
    case COMMUNICATION_ENCODING_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Handshake)
}

inline void Handshake::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.seeds_) {}

    , decltype(_impl_.supported_compressions_) { 0 }

    , decltype(_impl_.communication_encoding_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.seeds_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.seeds_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_communication_encoding_present();
}

Handshake::~Handshake() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Handshake)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Handshake::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seeds_.Destroy();
  if (has_communication_encoding_present()) {
    clear_communication_encoding_present();
  }
}

void Handshake::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Handshake::clear_communication_encoding_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Handshake)
  switch (communication_encoding_present_case()) {
    case kCommunicationEncoding: {
      _impl_.communication_encoding_present_.communication_encoding_.Destroy();
      break;
    }
    case COMMUNICATION_ENCODING_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COMMUNICATION_ENCODING_PRESENT_NOT_SET;
}


void Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Handshake)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seeds_.ClearToEmpty();
  _impl_.supported_compressions_ = 0;
  clear_communication_encoding_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Handshake::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string communication_encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_communication_encoding();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Handshake.communication_encoding"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes seeds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_seeds();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .com.alibaba.otter.canal.protocol.Compression supported_compressions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_supported_compressions(static_cast<::com::alibaba::otter::canal::protocol::Compression>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Handshake::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Handshake)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string communication_encoding = 1;
  if (communication_encoding_present_case() == kCommunicationEncoding) {
    const std::string& _s = this->_internal_communication_encoding();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Handshake.communication_encoding");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes seeds = 2;
  if (!this->_internal_seeds().empty()) {
    const std::string& _s = this->_internal_seeds();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // .com.alibaba.otter.canal.protocol.Compression supported_compressions = 3;
  if (this->_internal_supported_compressions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_supported_compressions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Handshake)
  return target;
}

::size_t Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Handshake)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes seeds = 2;
  if (!this->_internal_seeds().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_seeds());
  }

  // .com.alibaba.otter.canal.protocol.Compression supported_compressions = 3;
  if (this->_internal_supported_compressions() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_supported_compressions());
  }

  switch (communication_encoding_present_case()) {
    // string communication_encoding = 1;
    case kCommunicationEncoding: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_communication_encoding());
      break;
    }
    case COMMUNICATION_ENCODING_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Handshake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Handshake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Handshake::GetClassData() const { return &_class_data_; }


void Handshake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Handshake*>(&to_msg);
  auto& from = static_cast<const Handshake&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Handshake)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_seeds().empty()) {
    _this->_internal_set_seeds(from._internal_seeds());
  }
  if (from._internal_supported_compressions() != 0) {
    _this->_internal_set_supported_compressions(from._internal_supported_compressions());
  }
  switch (from.communication_encoding_present_case()) {
    case kCommunicationEncoding: {
      _this->_internal_set_communication_encoding(from._internal_communication_encoding());
      break;
    }
    case COMMUNICATION_ENCODING_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Handshake::CopyFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {
  return true;
}

void Handshake::InternalSwap(Handshake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.seeds_, lhs_arena,
                                       &other->_impl_.seeds_, rhs_arena);
  swap(_impl_.supported_compressions_, other->_impl_.supported_compressions_);
  swap(_impl_.communication_encoding_present_, other->_impl_.communication_encoding_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Handshake::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[2]);
}
// ===================================================================

class ClientAuth::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::ClientAuth, _impl_._oneof_case_);
};

ClientAuth::ClientAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.ClientAuth)
}
ClientAuth::ClientAuth(const ClientAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.filter_) {}

    , decltype(_impl_.start_timestamp_) {}

    , decltype(_impl_.net_read_timeout_present_){}
    , decltype(_impl_.net_write_timeout_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    _this->_impl_.destination_.Set(from._internal_destination(), _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filter().empty()) {
    _this->_impl_.filter_.Set(from._internal_filter(), _this->GetArenaForAllocation());
  }
  _this->_impl_.start_timestamp_ = from._impl_.start_timestamp_;
  clear_has_net_read_timeout_present();
  switch (from.net_read_timeout_present_case()) {
    case kNetReadTimeout: {
      _this->_internal_set_net_read_timeout(from._internal_net_read_timeout());
      break;
    }
    case NET_READ_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_net_write_timeout_present();
  switch (from.net_write_timeout_present_case()) {
    case kNetWriteTimeout: {
      _this->_internal_set_net_write_timeout(from._internal_net_write_timeout());
      break;
    }
    case NET_WRITE_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.ClientAuth)
}

inline void ClientAuth::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.username_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.filter_) {}

    , decltype(_impl_.start_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.net_read_timeout_present_){}
    , decltype(_impl_.net_write_timeout_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_net_read_timeout_present();
  clear_has_net_write_timeout_present();
}

ClientAuth::~ClientAuth() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.ClientAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientAuth::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  _impl_.destination_.Destroy();
  _impl_.client_id_.Destroy();
  _impl_.filter_.Destroy();
  if (has_net_read_timeout_present()) {
    clear_net_read_timeout_present();
  }
  if (has_net_write_timeout_present()) {
    clear_net_write_timeout_present();
  }
}

void ClientAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientAuth::clear_net_read_timeout_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.ClientAuth)
  switch (net_read_timeout_present_case()) {
    case kNetReadTimeout: {
      // No need to clear
      break;
    }
    case NET_READ_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NET_READ_TIMEOUT_PRESENT_NOT_SET;
}

void ClientAuth::clear_net_write_timeout_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.ClientAuth)
  switch (net_write_timeout_present_case()) {
    case kNetWriteTimeout: {
      // No need to clear
      break;
    }
    case NET_WRITE_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = NET_WRITE_TIMEOUT_PRESENT_NOT_SET;
}


void ClientAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.ClientAuth)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.destination_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.filter_.ClearToEmpty();
  _impl_.start_timestamp_ = ::int64_t{0};
  clear_net_read_timeout_present();
  clear_net_write_timeout_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.ClientAuth.username"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 net_read_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_net_read_timeout(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 net_write_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_net_write_timeout(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string destination = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.ClientAuth.destination"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string client_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.ClientAuth.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.ClientAuth.filter"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 start_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientAuth::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.ClientAuth)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    const std::string& _s = this->_internal_username();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.ClientAuth.username");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes password = 2;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // int32 net_read_timeout = 3;
  if (net_read_timeout_present_case() == kNetReadTimeout) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_net_read_timeout(), target);
  }

  // int32 net_write_timeout = 4;
  if (net_write_timeout_present_case() == kNetWriteTimeout) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_net_write_timeout(), target);
  }

  // string destination = 5;
  if (!this->_internal_destination().empty()) {
    const std::string& _s = this->_internal_destination();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.ClientAuth.destination");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string client_id = 6;
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.ClientAuth.client_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string filter = 7;
  if (!this->_internal_filter().empty()) {
    const std::string& _s = this->_internal_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.ClientAuth.filter");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // int64 start_timestamp = 8;
  if (this->_internal_start_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_start_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.ClientAuth)
  return target;
}

::size_t ClientAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.ClientAuth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_username());
  }

  // bytes password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_password());
  }

  // string destination = 5;
  if (!this->_internal_destination().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination());
  }

  // string client_id = 6;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // string filter = 7;
  if (!this->_internal_filter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_filter());
  }

  // int64 start_timestamp = 8;
  if (this->_internal_start_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_timestamp());
  }

  switch (net_read_timeout_present_case()) {
    // int32 net_read_timeout = 3;
    case kNetReadTimeout: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_net_read_timeout());
      break;
    }
    case NET_READ_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (net_write_timeout_present_case()) {
    // int32 net_write_timeout = 4;
    case kNetWriteTimeout: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_net_write_timeout());
      break;
    }
    case NET_WRITE_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientAuth::GetClassData() const { return &_class_data_; }


void ClientAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientAuth*>(&to_msg);
  auto& from = static_cast<const ClientAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.ClientAuth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_filter().empty()) {
    _this->_internal_set_filter(from._internal_filter());
  }
  if (from._internal_start_timestamp() != 0) {
    _this->_internal_set_start_timestamp(from._internal_start_timestamp());
  }
  switch (from.net_read_timeout_present_case()) {
    case kNetReadTimeout: {
      _this->_internal_set_net_read_timeout(from._internal_net_read_timeout());
      break;
    }
    case NET_READ_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.net_write_timeout_present_case()) {
    case kNetWriteTimeout: {
      _this->_internal_set_net_write_timeout(from._internal_net_write_timeout());
      break;
    }
    case NET_WRITE_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientAuth::CopyFrom(const ClientAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.ClientAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAuth::IsInitialized() const {
  return true;
}

void ClientAuth::InternalSwap(ClientAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_, lhs_arena,
                                       &other->_impl_.destination_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filter_, lhs_arena,
                                       &other->_impl_.filter_, rhs_arena);

  swap(_impl_.start_timestamp_, other->_impl_.start_timestamp_);
  swap(_impl_.net_read_timeout_present_, other->_impl_.net_read_timeout_present_);
  swap(_impl_.net_write_timeout_present_, other->_impl_.net_write_timeout_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[3]);
}
// ===================================================================

class Ack::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Ack, _impl_._oneof_case_);
};

Ack::Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Ack)
}
Ack::Ack(const Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_) {}

    , decltype(_impl_.error_code_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), _this->GetArenaForAllocation());
  }
  clear_has_error_code_present();
  switch (from.error_code_present_case()) {
    case kErrorCode: {
      _this->_internal_set_error_code(from._internal_error_code());
      break;
    }
    case ERROR_CODE_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Ack)
}

inline void Ack::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_) {}

    , decltype(_impl_.error_code_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_error_code_present();
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ack::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (has_error_code_present()) {
    clear_error_code_present();
  }
}

void Ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ack::clear_error_code_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Ack)
  switch (error_code_present_case()) {
    case kErrorCode: {
      // No need to clear
      break;
    }
    case ERROR_CODE_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ERROR_CODE_PRESENT_NOT_SET;
}


void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Ack)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  clear_error_code_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Ack.error_message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Ack::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Ack)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (error_code_present_case() == kErrorCode) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_error_code(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Ack.error_message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Ack)
  return target;
}

::size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Ack)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  switch (error_code_present_case()) {
    // int32 error_code = 1;
    case kErrorCode: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_error_code());
      break;
    }
    case ERROR_CODE_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ack::GetClassData() const { return &_class_data_; }


void Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ack*>(&to_msg);
  auto& from = static_cast<const Ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Ack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  switch (from.error_code_present_case()) {
    case kErrorCode: {
      _this->_internal_set_error_code(from._internal_error_code());
      break;
    }
    case ERROR_CODE_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::InternalSwap(Ack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, lhs_arena,
                                       &other->_impl_.error_message_, rhs_arena);
  swap(_impl_.error_code_present_, other->_impl_.error_code_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[4]);
}
// ===================================================================

class ClientAck::_Internal {
 public:
};

ClientAck::ClientAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.ClientAck)
}
ClientAck::ClientAck(const ClientAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.batch_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    _this->_impl_.destination_.Set(from._internal_destination(), _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.batch_id_ = from._impl_.batch_id_;
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.ClientAck)
}

inline void ClientAck::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.batch_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientAck::~ClientAck() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.ClientAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientAck::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_.Destroy();
  _impl_.client_id_.Destroy();
}

void ClientAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientAck::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.ClientAck)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.batch_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.ClientAck.destination"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.ClientAck.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 batch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientAck::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.ClientAck)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    const std::string& _s = this->_internal_destination();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.ClientAck.destination");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.ClientAck.client_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 batch_id = 3;
  if (this->_internal_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.ClientAck)
  return target;
}

::size_t ClientAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.ClientAck)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination());
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // int64 batch_id = 3;
  if (this->_internal_batch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_batch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientAck::GetClassData() const { return &_class_data_; }


void ClientAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientAck*>(&to_msg);
  auto& from = static_cast<const ClientAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.ClientAck)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_batch_id() != 0) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientAck::CopyFrom(const ClientAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.ClientAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAck::IsInitialized() const {
  return true;
}

void ClientAck::InternalSwap(ClientAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_, lhs_arena,
                                       &other->_impl_.destination_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);

  swap(_impl_.batch_id_, other->_impl_.batch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[5]);
}
// ===================================================================

class Sub::_Internal {
 public:
};

Sub::Sub(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Sub)
}
Sub::Sub(const Sub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sub* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.filter_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    _this->_impl_.destination_.Set(from._internal_destination(), _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filter().empty()) {
    _this->_impl_.filter_.Set(from._internal_filter(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Sub)
}

inline void Sub::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.filter_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sub::~Sub() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Sub)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sub::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_.Destroy();
  _impl_.client_id_.Destroy();
  _impl_.filter_.Destroy();
}

void Sub::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sub::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Sub)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.filter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sub::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Sub.destination"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Sub.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Sub.filter"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Sub::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Sub)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    const std::string& _s = this->_internal_destination();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Sub.destination");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Sub.client_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string filter = 7;
  if (!this->_internal_filter().empty()) {
    const std::string& _s = this->_internal_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Sub.filter");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Sub)
  return target;
}

::size_t Sub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Sub)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination());
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // string filter = 7;
  if (!this->_internal_filter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_filter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sub::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sub::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sub::GetClassData() const { return &_class_data_; }


void Sub::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sub*>(&to_msg);
  auto& from = static_cast<const Sub&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Sub)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_filter().empty()) {
    _this->_internal_set_filter(from._internal_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sub::CopyFrom(const Sub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Sub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub::IsInitialized() const {
  return true;
}

void Sub::InternalSwap(Sub* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_, lhs_arena,
                                       &other->_impl_.destination_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filter_, lhs_arena,
                                       &other->_impl_.filter_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sub::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[6]);
}
// ===================================================================

class Unsub::_Internal {
 public:
};

Unsub::Unsub(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Unsub)
}
Unsub::Unsub(const Unsub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Unsub* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.filter_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    _this->_impl_.destination_.Set(from._internal_destination(), _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filter().empty()) {
    _this->_impl_.filter_.Set(from._internal_filter(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Unsub)
}

inline void Unsub::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.filter_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Unsub::~Unsub() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Unsub)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Unsub::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_.Destroy();
  _impl_.client_id_.Destroy();
  _impl_.filter_.Destroy();
}

void Unsub::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Unsub::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Unsub)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.filter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Unsub::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Unsub.destination"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Unsub.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Unsub.filter"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Unsub::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Unsub)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    const std::string& _s = this->_internal_destination();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Unsub.destination");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Unsub.client_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string filter = 7;
  if (!this->_internal_filter().empty()) {
    const std::string& _s = this->_internal_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Unsub.filter");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Unsub)
  return target;
}

::size_t Unsub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Unsub)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination());
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // string filter = 7;
  if (!this->_internal_filter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_filter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Unsub::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Unsub::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Unsub::GetClassData() const { return &_class_data_; }


void Unsub::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Unsub*>(&to_msg);
  auto& from = static_cast<const Unsub&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Unsub)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_filter().empty()) {
    _this->_internal_set_filter(from._internal_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Unsub::CopyFrom(const Unsub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Unsub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unsub::IsInitialized() const {
  return true;
}

void Unsub::InternalSwap(Unsub* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_, lhs_arena,
                                       &other->_impl_.destination_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filter_, lhs_arena,
                                       &other->_impl_.filter_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Unsub::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[7]);
}
// ===================================================================

class Get::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Get, _impl_._oneof_case_);
};

Get::Get(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Get)
}
Get::Get(const Get& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Get* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.fetch_size_) {}

    , decltype(_impl_.timeout_present_){}
    , decltype(_impl_.unit_present_){}
    , decltype(_impl_.auto_ack_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    _this->_impl_.destination_.Set(from._internal_destination(), _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.fetch_size_ = from._impl_.fetch_size_;
  clear_has_timeout_present();
  switch (from.timeout_present_case()) {
    case kTimeout: {
      _this->_internal_set_timeout(from._internal_timeout());
      break;
    }
    case TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_unit_present();
  switch (from.unit_present_case()) {
    case kUnit: {
      _this->_internal_set_unit(from._internal_unit());
      break;
    }
    case UNIT_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_auto_ack_present();
  switch (from.auto_ack_present_case()) {
    case kAutoAck: {
      _this->_internal_set_auto_ack(from._internal_auto_ack());
      break;
    }
    case AUTO_ACK_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Get)
}

inline void Get::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.fetch_size_) { 0 }

    , decltype(_impl_.timeout_present_){}
    , decltype(_impl_.unit_present_){}
    , decltype(_impl_.auto_ack_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_timeout_present();
  clear_has_unit_present();
  clear_has_auto_ack_present();
}

Get::~Get() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Get)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Get::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_.Destroy();
  _impl_.client_id_.Destroy();
  if (has_timeout_present()) {
    clear_timeout_present();
  }
  if (has_unit_present()) {
    clear_unit_present();
  }
  if (has_auto_ack_present()) {
    clear_auto_ack_present();
  }
}

void Get::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Get::clear_timeout_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Get)
  switch (timeout_present_case()) {
    case kTimeout: {
      // No need to clear
      break;
    }
    case TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TIMEOUT_PRESENT_NOT_SET;
}

void Get::clear_unit_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Get)
  switch (unit_present_case()) {
    case kUnit: {
      // No need to clear
      break;
    }
    case UNIT_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = UNIT_PRESENT_NOT_SET;
}

void Get::clear_auto_ack_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Get)
  switch (auto_ack_present_case()) {
    case kAutoAck: {
      // No need to clear
      break;
    }
    case AUTO_ACK_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = AUTO_ACK_PRESENT_NOT_SET;
}


void Get::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Get)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.fetch_size_ = 0;
  clear_timeout_present();
  clear_unit_present();
  clear_auto_ack_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Get::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Get.destination"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Get.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 fetch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.fetch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 unit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _internal_set_unit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool auto_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _internal_set_auto_ack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Get::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Get)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    const std::string& _s = this->_internal_destination();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Get.destination");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Get.client_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 fetch_size = 3;
  if (this->_internal_fetch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_fetch_size(), target);
  }

  // int64 timeout = 4;
  if (timeout_present_case() == kTimeout) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_timeout(), target);
  }

  // int32 unit = 5;
  if (unit_present_case() == kUnit) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_unit(), target);
  }

  // bool auto_ack = 6;
  if (auto_ack_present_case() == kAutoAck) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_auto_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Get)
  return target;
}

::size_t Get::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Get)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination());
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // int32 fetch_size = 3;
  if (this->_internal_fetch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_fetch_size());
  }

  switch (timeout_present_case()) {
    // int64 timeout = 4;
    case kTimeout: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timeout());
      break;
    }
    case TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (unit_present_case()) {
    // int32 unit = 5;
    case kUnit: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_unit());
      break;
    }
    case UNIT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (auto_ack_present_case()) {
    // bool auto_ack = 6;
    case kAutoAck: {
      total_size += 2;
      break;
    }
    case AUTO_ACK_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Get::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Get::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Get::GetClassData() const { return &_class_data_; }


void Get::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Get*>(&to_msg);
  auto& from = static_cast<const Get&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Get)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_fetch_size() != 0) {
    _this->_internal_set_fetch_size(from._internal_fetch_size());
  }
  switch (from.timeout_present_case()) {
    case kTimeout: {
      _this->_internal_set_timeout(from._internal_timeout());
      break;
    }
    case TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.unit_present_case()) {
    case kUnit: {
      _this->_internal_set_unit(from._internal_unit());
      break;
    }
    case UNIT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.auto_ack_present_case()) {
    case kAutoAck: {
      _this->_internal_set_auto_ack(from._internal_auto_ack());
      break;
    }
    case AUTO_ACK_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Get::CopyFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  return true;
}

void Get::InternalSwap(Get* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_, lhs_arena,
                                       &other->_impl_.destination_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);

  swap(_impl_.fetch_size_, other->_impl_.fetch_size_);
  swap(_impl_.timeout_present_, other->_impl_.timeout_present_);
  swap(_impl_.unit_present_, other->_impl_.unit_present_);
  swap(_impl_.auto_ack_present_, other->_impl_.auto_ack_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Get::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[8]);
}
// ===================================================================

class Messages::_Internal {
 public:
};

Messages::Messages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Messages)
}
Messages::Messages(const Messages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Messages* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.batch_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.batch_id_ = from._impl_.batch_id_;
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Messages)
}

inline void Messages::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.batch_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Messages::~Messages() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Messages)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Messages::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_messages()->~RepeatedPtrField();
}

void Messages::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Messages::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Messages)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_messages()->Clear();
  _impl_.batch_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Messages::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 batch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bytes messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Messages::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Messages)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 batch_id = 1;
  if (this->_internal_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_batch_id(), target);
  }

  // repeated bytes messages = 2;
  for (int i = 0, n = this->_internal_messages_size(); i < n; ++i) {
    const auto& s = this->_internal_messages(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Messages)
  return target;
}

::size_t Messages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Messages)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes messages = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_messages().size());
  for (int i = 0, n = _internal_messages().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_messages().Get(i));
  }

  // int64 batch_id = 1;
  if (this->_internal_batch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_batch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Messages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Messages::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Messages::GetClassData() const { return &_class_data_; }


void Messages::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Messages*>(&to_msg);
  auto& from = static_cast<const Messages&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Messages)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(from._internal_messages());
  if (from._internal_batch_id() != 0) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Messages::CopyFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messages::IsInitialized() const {
  return true;
}

void Messages::InternalSwap(Messages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_messages()->InternalSwap(
      other->_internal_mutable_messages());

  swap(_impl_.batch_id_, other->_impl_.batch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Messages::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[9]);
}
// ===================================================================

class Dump::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::com::alibaba::otter::canal::protocol::Dump, _impl_._oneof_case_);
};

Dump::Dump(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.Dump)
}
Dump::Dump(const Dump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dump* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.journal_) {}

    , decltype(_impl_.position_) {}

    , decltype(_impl_.timestamp_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.journal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.journal_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_journal().empty()) {
    _this->_impl_.journal_.Set(from._internal_journal(), _this->GetArenaForAllocation());
  }
  _this->_impl_.position_ = from._impl_.position_;
  clear_has_timestamp_present();
  switch (from.timestamp_present_case()) {
    case kTimestamp: {
      _this->_internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case TIMESTAMP_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.Dump)
}

inline void Dump::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.journal_) {}

    , decltype(_impl_.position_) { ::int64_t{0} }

    , decltype(_impl_.timestamp_present_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.journal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.journal_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_timestamp_present();
}

Dump::~Dump() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.Dump)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dump::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.journal_.Destroy();
  if (has_timestamp_present()) {
    clear_timestamp_present();
  }
}

void Dump::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dump::clear_timestamp_present() {
// @@protoc_insertion_point(one_of_clear_start:com.alibaba.otter.canal.protocol.Dump)
  switch (timestamp_present_case()) {
    case kTimestamp: {
      // No need to clear
      break;
    }
    case TIMESTAMP_PRESENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TIMESTAMP_PRESENT_NOT_SET;
}


void Dump::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.Dump)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.journal_.ClearToEmpty();
  _impl_.position_ = ::int64_t{0};
  clear_timestamp_present();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dump::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string journal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_journal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.Dump.journal"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Dump::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.Dump)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string journal = 1;
  if (!this->_internal_journal().empty()) {
    const std::string& _s = this->_internal_journal();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.Dump.journal");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 position = 2;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_position(), target);
  }

  // int64 timestamp = 3;
  if (timestamp_present_case() == kTimestamp) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.Dump)
  return target;
}

::size_t Dump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.Dump)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string journal = 1;
  if (!this->_internal_journal().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_journal());
  }

  // int64 position = 2;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_position());
  }

  switch (timestamp_present_case()) {
    // int64 timestamp = 3;
    case kTimestamp: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
      break;
    }
    case TIMESTAMP_PRESENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dump::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dump::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dump::GetClassData() const { return &_class_data_; }


void Dump::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dump*>(&to_msg);
  auto& from = static_cast<const Dump&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.Dump)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_journal().empty()) {
    _this->_internal_set_journal(from._internal_journal());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  switch (from.timestamp_present_case()) {
    case kTimestamp: {
      _this->_internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case TIMESTAMP_PRESENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dump::CopyFrom(const Dump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.Dump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dump::IsInitialized() const {
  return true;
}

void Dump::InternalSwap(Dump* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.journal_, lhs_arena,
                                       &other->_impl_.journal_, rhs_arena);

  swap(_impl_.position_, other->_impl_.position_);
  swap(_impl_.timestamp_present_, other->_impl_.timestamp_present_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dump::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[10]);
}
// ===================================================================

class ClientRollback::_Internal {
 public:
};

ClientRollback::ClientRollback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.alibaba.otter.canal.protocol.ClientRollback)
}
ClientRollback::ClientRollback(const ClientRollback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientRollback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.batch_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination().empty()) {
    _this->_impl_.destination_.Set(from._internal_destination(), _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.batch_id_ = from._impl_.batch_id_;
  // @@protoc_insertion_point(copy_constructor:com.alibaba.otter.canal.protocol.ClientRollback)
}

inline void ClientRollback::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.destination_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.batch_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientRollback::~ClientRollback() {
  // @@protoc_insertion_point(destructor:com.alibaba.otter.canal.protocol.ClientRollback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientRollback::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_.Destroy();
  _impl_.client_id_.Destroy();
}

void ClientRollback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientRollback::Clear() {
// @@protoc_insertion_point(message_clear_start:com.alibaba.otter.canal.protocol.ClientRollback)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.batch_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientRollback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.ClientRollback.destination"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.alibaba.otter.canal.protocol.ClientRollback.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 batch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientRollback::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.alibaba.otter.canal.protocol.ClientRollback)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    const std::string& _s = this->_internal_destination();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.ClientRollback.destination");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "com.alibaba.otter.canal.protocol.ClientRollback.client_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 batch_id = 3;
  if (this->_internal_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.alibaba.otter.canal.protocol.ClientRollback)
  return target;
}

::size_t ClientRollback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.alibaba.otter.canal.protocol.ClientRollback)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 1;
  if (!this->_internal_destination().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination());
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // int64 batch_id = 3;
  if (this->_internal_batch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_batch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientRollback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientRollback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientRollback::GetClassData() const { return &_class_data_; }


void ClientRollback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientRollback*>(&to_msg);
  auto& from = static_cast<const ClientRollback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.alibaba.otter.canal.protocol.ClientRollback)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_destination().empty()) {
    _this->_internal_set_destination(from._internal_destination());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_batch_id() != 0) {
    _this->_internal_set_batch_id(from._internal_batch_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientRollback::CopyFrom(const ClientRollback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.alibaba.otter.canal.protocol.ClientRollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRollback::IsInitialized() const {
  return true;
}

void ClientRollback::InternalSwap(ClientRollback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_, lhs_arena,
                                       &other->_impl_.destination_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);

  swap(_impl_.batch_id_, other->_impl_.batch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientRollback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CanalProtocol_2eproto_getter, &descriptor_table_CanalProtocol_2eproto_once,
      file_level_metadata_CanalProtocol_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace canal
}  // namespace otter
}  // namespace alibaba
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Packet*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Packet >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::HeartBeat*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::HeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::HeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Handshake*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Handshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::ClientAuth*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::ClientAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::ClientAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Ack*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::ClientAck*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::ClientAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::ClientAck >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Sub*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Sub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Sub >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Unsub*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Unsub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Unsub >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Get*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Get >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Get >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Messages*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Messages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Messages >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::Dump*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::Dump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::Dump >(arena);
}
template<> PROTOBUF_NOINLINE ::com::alibaba::otter::canal::protocol::ClientRollback*
Arena::CreateMaybeMessage< ::com::alibaba::otter::canal::protocol::ClientRollback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::alibaba::otter::canal::protocol::ClientRollback >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
